var documenterSearchIndex = {"docs":
[{"location":"humann2/#HUMAnN2","page":"Working with HUMAnN2","title":"HUMAnN2","text":"","category":"section"},{"location":"humann2/","page":"Working with HUMAnN2","title":"Working with HUMAnN2","text":"Modules = [BiobakeryUtils]\nPages = [\"humann2.jl\"]","category":"page"},{"location":"humann2/#BiobakeryUtils.humann2_regroup-Tuple{DataFrames.DataFrame}","page":"Working with HUMAnN2","title":"BiobakeryUtils.humann2_regroup","text":"function humann2_regroup(df::DataFrame; inkind=\"uniref90\", outkind::String=\"ec\")\n\nWrapper for humann2_regroup script, replaces first column of a DataFrame with results from regrouping inkind to outkind.\n\n\n\n\n\n","category":"method"},{"location":"humann2/#BiobakeryUtils.humann2_rename-Tuple{DataFrames.DataFrame}","page":"Working with HUMAnN2","title":"BiobakeryUtils.humann2_rename","text":"humann2_rename(df::DataFrame; kind::String=\"ec\")\n\nWrapper for humann2_rename script, replaces first column of a DataFrame with results from renaming inkind to outkind.\n\n\n\n\n\n","category":"method"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The BioJulia organisation has a set of contribution guidelines which apply to all BioJulia projects. These guidelines are available here and it is recommended all new contributors read these guidelines before opening a pull request.","category":"page"},{"location":"contributing/#Making-a-contribution","page":"Contributing","title":"Making a contribution","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you're interested in adding functionality to BiobakeryUtils.jl, please feel free to open an issue or a pull request (PR) against the master branch. If you're not yet ready for that, you can also ask questions/start a discussion in the Bio.jl gitter channel.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Work-in-progress PRs are fine, as discussion about approach and code review can happen in the PR.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Before merging, any new code should be unit tested and have docs for newly exported functions, but if you don't know how to do this, don't worry, we can help!","category":"page"},{"location":"metaphlan2/#MetaPhlAn2","page":"Working with MetaPhlAn2","title":"MetaPhlAn2","text":"","category":"section"},{"location":"metaphlan2/","page":"Working with MetaPhlAn2","title":"Working with MetaPhlAn2","text":"Modules = [BiobakeryUtils]\nPages = [\"metaphlan2.jl\"]","category":"page"},{"location":"general/#General","page":"General Utilities","title":"General","text":"","category":"section"},{"location":"general/","page":"General Utilities","title":"General Utilities","text":"Modules = [BiobakeryUtils]\nPages = [\"general.jl\"]","category":"page"},{"location":"general/#BiobakeryUtils.import_abundance_table-Tuple{AbstractString}","page":"General Utilities","title":"BiobakeryUtils.import_abundance_table","text":"import_abundance_table(file::AbstractString; delim::Char='\t')\n\nGiven a file path or paths to abundance tables (eg humann2 or metaphlan2), create abundance table. Table is presumed to have samples in columns and features in rows. First column is taken as feature IDs.\n\n\n\n\n\n","category":"method"},{"location":"general/#BiobakeryUtils.permanova","page":"General Utilities","title":"BiobakeryUtils.permanova","text":"permanova(dm::Array{<:Real,2}, metadata::AbstractVector, nperm::Int=999;\n            label=nothing, datafilter=x->true)\npermanova(dm::Array{<:Real,2}, metadata::AbstractDataFrame, nperm=999;\n            fields=names(metadata), kwargs...)\n\nPerforms PERMANOVA analysis from R's vegan package using the adonis function.\n\nPositional arguments:\n\ndm: a symetric distance matrix.\nmetadata: either a vector of numerical or categorical data to test against, or a DataFrame with columns for each variable to test against. Any missing data in the vector or rows of the DataFrame with missing data will be filtered out.\nnperm=999: number of permutations for PERMANOVA.\n\nKeyword Arguments:\n\ndatafilter=x-> true: a function to filter elements (or rows) of metadata. Removal of missing values occurs before this function is applied.\nlabel=nothing: If provided, adds a column label to the results filled with this value. Useful if performing multiple runs that will be combined in a single DataFrame.\nfields: if passing a DataFrame as metadata, an array of symbols may be passed to select only certain columns and/or determine their order for the resulting PERMANOVA.\n\nNote: this will throw an error if vegan is not installed. To install:\n\nusing RCall\n\nreval(\"install.packages('vegan')\")\n\n\n\n\n\n","category":"function"},{"location":"#BiobakeryUtils","page":"BiobakeryUtils","title":"BiobakeryUtils","text":"","category":"section"},{"location":"#Contents","page":"BiobakeryUtils","title":"Contents","text":"","category":"section"},{"location":"","page":"BiobakeryUtils","title":"BiobakeryUtils","text":"Pages = [\"general.md\", \"humann2.md\", \"metaphlan2.md\"]\nDepth = 6","category":"page"}]
}
