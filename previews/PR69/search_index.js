var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = BiobakeryUtils","category":"page"},{"location":"gettingstarted/#getting-started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This is a package for the julia programming language, designed for working with the bioBakery family of tools for metagenomic analysis of microbial communities. Currently, we support MetaPhlAn and HUMAnN.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Read on to learn how to install the package and use it to begin using it to uncover insights about your microbial community data! If you run into problems, you can open an issue on this repository, or start a discussion over on Microbiome.jl.","category":"page"},{"location":"gettingstarted/#Installing-julia","page":"Getting Started","title":"Installing julia","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If this is your first time using julia, you'll need to install it by going to the julia downloads page and following the instructions for your platform. BiobakeryUtils.jl should work on any julia version >= 1.6.0.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Alternatively, you can you jill.py, which is an easy-to-use python utility for installing julia.","category":"page"},{"location":"gettingstarted/#Launching-julia-from-the-terminal","page":"Getting Started","title":"Launching julia from the terminal","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you download the \"app\" versions of julia from the downloads page above, you may also want to add julia to your shell's $PATH so that you can launch it from your terminal. For windows users, you can look look here for instructions. Mac users, see here for instructions.","category":"page"},{"location":"gettingstarted/#Making-a-project","page":"Getting Started","title":"Making a project","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"In julia, it's typically a good idea to use \"projects\" to organize your package dependencies (this is similar to \"environments\" that conda uses).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To do this, make a directory and \"activate\" it in the julia Pkg REPL.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"$ mkdir my_project\n\n$ cd my_project\n\n$ julia\n\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.1 (2021-04-23)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia> # press ] to enter the Pkg REPL\n\n(@v1.6) pkg> activate .\n  Activating new environment at `~/my_project/Project.toml`\n\n(my_project) pkg> # press backspace to get back to julia REPL\n\njulia>","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: asciicast)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"So far, this is still just an empty directory, but you can also use the Pkg REPL to install packages, like BiobakeryUtils.jl.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(my_project) pkg> add BiobakeryUtils","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: asciicast)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Once this process completes, the directory will now contain a Project.toml file that contains BiobakeryUtils.jl as a dependency, and a Manifest.toml file that contains all of the exact info about dependencies installed for this environment.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"In the future, you can launch julia with the environment already activated using julia --project if your working directory is my_project/, or julia --project=<path to project> if you're in a different working directory (eg. julia --project=~/my_project if my_project/ is in the home directory).","category":"page"},{"location":"gettingstarted/#Using-bioBakery-command-line-tools","page":"Getting Started","title":"Using bioBakery command line tools","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Some functions provided by this package (eg humann_regroup and humann_rename), require the appropriate bioBakery tools to be installed and accessible from the julia shell environment. The easiest way to do this is to use Conda.jl, though other installation methods are possible as well.","category":"page"},{"location":"gettingstarted/#Using-a-previous-installation","page":"Getting Started","title":"Using a previous installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you have a previous installation of metaphlan and/or humann, you can tell julia to use them by modifying the $PATH environment variable.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Environment variables in julia are stored in a Dict called ENV. For example, the $PATH variable in Unix tells the shell where to look for executable programs, and is available in julia using ENV[\"PATH\"]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PATH\"]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you launch julia from the shell, this variable is automatically populated with the same $PATH, so if you can access humann or metaphlan from your shell, then launch julia, you should be all set (eg, if you've installed them with miniconda, and you do conda activate envname, then launch julia from the same shell, they should already be available).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If not, you need to identify where humann or metaphlan executables are located, then add that location to ENV[\"PATH\"] (delimeted by :). For example, if the humann executable is found at /home/kevin/.local/bin, you would run:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PATH\"] = ENV[\"PATH\"] * \":\" * \"/home/kevin/.local/bin\"","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you don't know where your installation is located, from the terminal, you can use the which command:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"$ which humann\n/home/kevin/.local/bin/humann","category":"page"},{"location":"gettingstarted/#using-conda","page":"Getting Started","title":"Using Conda.jl","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you don't have a previous installation, you can use Conda.jl to install the necessary tools.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This can be done automatically for you using BiobakeryUtils.install_deps().","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> BiobakeryUtils.install_deps()\n[ Info: Running conda create -y -p /home/kevin/.julia/conda/3/envs/BiobakeryUtils in root environment\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n## Package Plan ##\n\n  environment location: /home/kevin/.julia/conda/3/envs/BiobakeryUtils\n\n\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: **done**\n# ... etc","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"BiobakeryUtils.install_deps()","category":"page"},{"location":"gettingstarted/#BiobakeryUtils.install_deps-Tuple{}","page":"Getting Started","title":"BiobakeryUtils.install_deps","text":"install_deps([env]; [force=false])\n\nUses Conda.jl to install HUMAnN and MetaPhlAn. In order to use the commandline tools, you must have the conda environment bin directory in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Or you can do it manually. First install Conda.jl in your environment using the Pkg REPL (accessible by typing ] in the julia REPL - press <backspace> to get back to the regular REPL).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"$ cd my_project/\n\n$ julia --project\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.1 (2021-04-23)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia> # press ']'\n\n(my_project) pkg> add Conda\n    Updating registry at `~/.julia/registries/General`\n   Resolving package versions...\n    Updating `~/.julia/dev/BiobakeryUtils/my_project/Project.toml`\n  [8f4d0f93] + Conda v1.5.2\n    Updating `~/.julia/dev/BiobakeryUtils/my_project/Manifest.toml`\n  [8f4d0f93] + Conda v1.5.2\n  [682c06a0] + JSON v0.21.2\n  [69de0a69] + Parsers v2.0.4\n  [81def892] + VersionParsing v1.2.0\n  [ade2ca70] + Dates\n  [a63ad114] + Mmap\n  [de0858da] + Printf\n  [4ec0a83e] + Unicode\n\njulia> using Conda","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"First, you'll need to add \"channels\" to a new Conda environment. The order here is important. Assuming you want your environment to be called biobakery:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> Conda.add_channel(\"bioconda\", :biobakery)\n┌ Info: Running conda config --add channels bioconda --file /home/kevin/.julia/conda/3/envs/biobakery/condarc-julia.yml --force\n└ in biobakery environment\n# ...\n\njulia> Conda.add_channel(\"conda-forge\", :biobakery)\n┌ Info: Running conda config --add channels conda-forge --file /home/kevin/.julia/conda/3/envs/biobakery/condarc-julia.yml\n└ --force in biobakery environment\n# ...\n\njulia> Conda.add(\"humann\", :biobakery)\n[ Info: Running conda install -y -c bioconda humann in biobakery environment\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n# ...\n\njulia> Conda.add(\"metaphlan\", :biobakery; channel=\"bioconda\")\n[ Info: Running conda install -y -c bioconda metaphlan in biobakery environment\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n# ...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: asciicast)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"By default, Conda.jl puts environments into ~/.julia/conda/envs/<env name>/bin, which you can get with Conda.bin_dir(), so in this case, you'd next want to run","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PATH\"] = ENV[\"PATH\"] * \":\" * Conda.bin_dir(:biobakery)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Note: if you need to manually edit ENV[\"PATH\"] like this, you'll need to do this each time you load julia. To get around this, you can modify you shell's $PATH variable, or use direnv to set it on a per-directory basis.","category":"page"},{"location":"gettingstarted/#Using-MetaPhlAn-and-HUMAnN","page":"Getting Started","title":"Using MetaPhlAn and HUMAnN","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"You should now be ready to start using MetaPhlAn and HUMAnN from julia! Take a look at the MetaPhlAn tutorial or HUMAnN tutorial for next steps.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The BioJulia organisation has a set of contribution guidelines which apply to all BioJulia projects. These guidelines are available here and it is recommended all new contributors read these guidelines before opening a pull request.","category":"page"},{"location":"contributing/#Making-a-contribution","page":"Contributing","title":"Making a contribution","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you're interested in adding functionality to BiobakeryUtils.jl, please feel free to open an issue or a pull request (PR) against the main branch. If you're not yet ready for that, you can also ask questions/start a discussion in the #biology channel on slack or zulip, or using the biology domain on discourse.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Work-in-progress PRs are fine, as discussion about approach and code review can happen in the PR.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Before merging, any new code should be unit tested and have docs for newly exported functions, but if you don't know how to do this, don't worry, we can help!","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"CurrentModule = BiobakeryUtils\nDocTestSetup  = quote\n    using BiobakeryUtils\n    using BiobakeryUtils.Conda\n    BiobakeryUtils.install_deps()\n    ENV[\"PATH\"] = ENV[\"PATH\"] * Conda.bind_dir(:BiobakeryUtils)\nend","category":"page"},{"location":"humann/#humann-tutorial","page":"Working with HUMAnN","title":"HUMAnN Tutorial with BiobakeryUtils.jl","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"🗒️ This tutorial is meant to be run in parallel with / mirror the official HUMAnN v3 tutorial\n❓️ If you have questions about HUMAnN itself, please direct them to the bioBakery help forum\n🤔 If you have questions about using the MetaPhlAn tools in julia, please open an issue, or start a discussion over on Microbiome.jl!\n📔 For a function / type reference, jump to the bottom","category":"page"},{"location":"humann/#Installation-and-setup","page":"Working with HUMAnN","title":"Installation and setup","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"If you haven't already, check out the \"Getting Started\" page to install julia, create an environment, and install BiobakeryUtils.jl, and hook up or install the HUMAnN v3 command line tools.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"This tutorial assumes:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You are running julia v1.6 or greater\nYou have activated a julia Project that has BiobakeryUtils.jl installed\nThe humann python package is installed, and accessible from your PATH.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"If any of those things aren't true, or you don't know if they're true, go back to \"Getting Started\" to see if you skipped a step. If you're still confused, please ask (see 3rd bullet point at the top)!","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"using BiobakeryUtils\nusing BiobakeryUtils.Conda\nBiobakeryUtils.install_deps()\nENV[\"PATH\"] = ENV[\"PATH\"] * ':' * Conda.bin_dir(:BiobakeryUtils) #hide","category":"page"},{"location":"humann/#HUMAnN-Databases","page":"Working with HUMAnN","title":"HUMAnN Databases","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"HUMAnN requires a number of specialized databases to work correctly. When you first install it, it comes with some demo databases that are much smaller, but can be used to complete this tutorial. However, for actually running real data, you'll want to take the time to download them - they're BIG! See here for more information.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For now, the easiest way to do this for now is via the shell, which you can access from the julia REPL by typing ;:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":";humann_databases --help\nusage: humann_databases [-h] [--available]\n                        [--download <database> <build> <install_location>]\n                        [--update-config {yes,no}]\n                        [--database-location DATABASE_LOCATION]\n\nHUMAnN Databases\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --available           print the available databases\n  --download <database> <build> <install_location>\n                        download the selected database to the install location\n  --update-config {yes,no}\n                        update the config file to set the new database as the default [DEFAULT: yes]\n  --database-location DATABASE_LOCATION\n                        location (local or remote) to pull the database\n\n;humann_databases --available\nHUMANnN2 Databases ( database : build = location )\nchocophlan : full = http://huttenhower.sph.harvard.edu/humann_data/chocophlan/full_chocophlan.v296_201901b.tar.gz\nchocophlan : DEMO = http://huttenhower.sph.harvard.edu/humann_data/chocophlan/DEMO_chocophlan.v296_201901b.tar.gz\nuniref : uniref50_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_annotated/uniref50_annotated_v201901b_ful\nl.tar.gz\nuniref : uniref90_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_annotated/uniref90_annotated_v201901b_ful\nl.tar.gz\nuniref : uniref50_ec_filtered_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_ec_filtered/uniref50_ec_filte\nred_201901b_subset.tar.gz\nuniref : uniref90_ec_filtered_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_ec_filtered/uniref90_ec_filte\nred_201901b_subset.tar.gz\nuniref : DEMO_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_annotated/uniref90_DEMO_diamond_v201901b.tar.\ngz\nutility_mapping : full = http://huttenhower.sph.harvard.edu/humann_data/full_mapping_v201901b.tar.gz","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For example, if you'd like to install these databases to /BigDrive/humann/, you could run","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"shell> humann_databases --download cholophlan full /BigDrive/humann/chocophlan\n# ... lots of output\n\nshell> humann_databases --download uniref uniref90_diamond /BigDrive/humann/uniref\n# ... lots of output\n\nshell> humann_databases --download utility_mapping full /BigDrive/humann/utility_mapping\n# ... lots of output","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"At some point, I'll write some functions to automate this, but for now, doing this will update a configuration file, so you shouldn't have to worry about it again.","category":"page"},{"location":"humann/#Running-HUMAnN","page":"Working with HUMAnN","title":"Running HUMAnN","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Some example files you can use to run this tutorial are available from the MetaPhlAn repo, and can be downloaded using the Downloads standard library in julia:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> using Downloads: download\n\njulia> base_url = \"https://github.com/biobakery/humann/raw/master/examples/\";\n\njulia> files = [\n           \"demo.fastq.gz\",\n           \"demo.sam\",\n           \"demo.m8\"\n       ];\n\njulia> for file in files\n           download(joinpath(base_url, file), file)\n       end\n\njulia> readdir()\n5-element Vector{String}:\n \"Manifest.toml\"\n \"Project.toml\"\n \"demo.fastq.gz\"\n \"demo.sam\"\n \"demo.m8\"","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For convenience, this package has the humann() function, which can be used in your julia scripts to build and call the humann command line tool.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For example, rather than call","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"$ humann --input demo.fastq.gz --output demo_fastq","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can do","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> humann(\"demo.fastq.gz\", \"demo_fastq\")\n[ Info: Running command: humann -i demo.fastq.gz -o demo_fastq\nCreating output directory: /home/kevin/my_project/demo_fastq\nOutput files will be written to: /home/kevin/my_project/demo_fastq\nDecompressing gzipped file ...","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"First, humann will run metaphlan to generate taxonomic profiles, then will use that taxonomic profile to run a custom gene search.","category":"page"},{"location":"humann/#Default-outputs","page":"Working with HUMAnN","title":"Default outputs","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"To load a profile generated by humann, use the humann_profile function:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs = humann_profile(\"demo_fastq/demo_genefamilies.tsv\")\nMicrobiome.CommunityProfile{Float64, Microbiome.GeneFunction, Microbiome.MicrobiomeSample} with 589 things in 1 places\n\nSample names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_I9QXW8...UniRef90_A6LH06, UniRef90_D0TRR5\n\nFeature names:\ndemo_genefamilies","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"HUMAnN generates \"stratified\" gene function profiles -  in other words, each gene function is also split into the species that contributed it. By default, human_profile skips the stratified rows (they can get big!):","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> first(features(gfs), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UniRef90_G1UL42\", missing)\n GeneFunction(\"UniRef90_I9QXW8\", missing)\n GeneFunction(\"UniRef90_A0A174QBF2\", missing)\n GeneFunction(\"UniRef90_A0A078RDY6\", missing)","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"The missing component of the GeneFunction means that these gene functions are not associated with a particular taxon.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"If you want to hang onto the taxon information, use the keyword argument stratified = true:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_strat = humann_profile(\"demo_fastq/demo_genefamilies.tsv\", stratified=true)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 1416 features in 1 samples\n\nFeature names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_G1UL42...UniRef90_D0TRR5, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies\n\n\n\njulia> first(features(gfs_strat), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UniRef90_G1UL42\", missing)\n GeneFunction(\"UniRef90_G1UL42\", Taxon(\"Bacteroides_dorei\", :species))\n GeneFunction(\"UniRef90_I9QXW8\", missing)\n GeneFunction(\"UniRef90_I9QXW8\", Taxon(\"Bacteroides_dorei\", :species))","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Here, we can see that the uniref90 \"G1UL42\" was contributed by Bacteroides dorei.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"The object returned by humann_profile is a CommunityProfile type from Microbiome.jl, and has a bunch of useful properties.","category":"page"},{"location":"humann/#Indexing","page":"Working with HUMAnN","title":"Indexing","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For example, you can index into a CommunityProfile just like you would a matrix. In julia, you can pull out specific values using [row, col]. So for example, to get the 3rd row, 2nd column, of matrix mat:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> mat\n4×3 Matrix{Int64}:\n  1   2   3\n  4   5   6\n  7   8   9\n 10  11  12\n\njulia> mat[3,2]\n8","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can also get \"slices\", eg to get rows 2-4, column 1:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> mat[2:4, 1]\n3-element Vector{Int64}:\n  4\n  7\n 10","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"To get all of one dimension, you can just use a bare :","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> mat[:, 1:2]\n4×2 Matrix{Int64}:\n  1   2\n  4   5\n  7   8\n 10  11","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For CommunityProfiles, you can index with numbers as above, but also with strings representing names of features (rows) or samples (columns):","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> samplenames(gfs_strat)\n1-element Vector{String}:\n \"demo_genefamilies\"\n\njulia> featurenames(gfs_strat)\n1416-element Vector{String}:\n \"UNMAPPED\"\n \"UniRef90_G1UL42\"\n \"UniRef90_G1UL42\"\n \"UniRef90_I9QXW8\"\n ⋮\n \"UniRef90_A6LH06\"\n \"UniRef90_D0TRR5\"\n \"UniRef90_D0TRR5\"\n \"UniRef90_D0TRR5\"\n\njulia> slice = gfs_strat[\"UniRef90_D0TRR5\", :]\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 3 features in 1 samples\n\nFeature names:\nUniRef90_D0TRR5, UniRef90_D0TRR5, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies\n\n\n\njulia> features(slice)\n3-element Vector{GeneFunction}:\n GeneFunction(\"UniRef90_D0TRR5\", missing)\n GeneFunction(\"UniRef90_D0TRR5\", Taxon(\"Bacteroides_vulgatus\", :species))\n GeneFunction(\"UniRef90_D0TRR5\", Taxon(\"Bacteroides_dorei\", :species))","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For gene functions, using a string to index will return all rows, regardless of the taxon. If you just want a single value, you can use a GeneFunction directly:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_strat[GeneFunction(\"UniRef90_D0TRR5\", \"Bacteroides_dorei\"), 1]\n0.8271298594","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can even pass an array of strings as the row index to get a slice with multiple gene functions:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> features(gfs_strat[[\"UniRef90_D0TRR5\", \"UniRef90_A6L100\"], :])\n5-element Vector{GeneFunction}:\n GeneFunction(\"UniRef90_A6L100\", missing)\n GeneFunction(\"UniRef90_A6L100\", Taxon(\"Bacteroides_vulgatus\", :species))\n GeneFunction(\"UniRef90_D0TRR5\", missing)\n GeneFunction(\"UniRef90_D0TRR5\", Taxon(\"Bacteroides_vulgatus\", :species))\n GeneFunction(\"UniRef90_D0TRR5\", Taxon(\"Bacteroides_dorei\", :species))","category":"page"},{"location":"humann/#Manipulating-tables","page":"Working with HUMAnN","title":"Manipulating tables","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"There are several ways to manipulate CommunityProfiles, both using julia and using utilities provided by humann.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"One example of the former is using filter, which takes a boolean function as the first argument, and returns a new CommunityProfile containing only rows that returned true. ","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For example, given a stratified table like gfs_strat, if you want to get only rows that have a taxon associated with them, you can do:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_strat_only = filter(hastaxon, gfs_strat)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 827 features in 1 samples\n\nFeature names:\nUniRef90_G1UL42, UniRef90_I9QXW8, UniRef90_A0A174QBF2...UniRef90_D0TRR5, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Uh oh! We've now lost the \"UNMAPPED\" row, which means that we won't have the reads that couldn't be mapped to a gene function represented. No matter, we can use julia's anonymous function (also sometimes called \"lambda function\") syntax to roll our own function.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"In the following example, gf -> indicates a function that takes a single argument (in this case, our GeneFunction), then askes if it's name is \"UNMAPPED\" with name(gf) == \"UNMAPPED\", OR (|| is a short-circuiting OR operator) if it has a taxon:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_with_unmapped = filter(\n                            gf-> name(gf) == \"UNMAPPED\" || hastaxon(gf),\n                            gfs_strat)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 828 features in 1 samples\n\nFeature names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_I9QXW8...UniRef90_D0TRR5, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies","category":"page"},{"location":"humann/#Normalize-RPK-to-relative-abundance","page":"Working with HUMAnN","title":"Normalize RPK to relative abundance","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Some humann utility scripts have convenience functions in BiobakeryUtils.jl. for example, if you want to renormalize your table into relative abundance, you could use humann_renorm_table from the command line, or call humann_renorm:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_renormed = humann_renorm(gfs_strat; units=\"relab\")\nLoading table from: /tmp/jl_9WL33H\n  Treating /tmp/jl_9WL33H as stratified output, e.g. ['UniRef90_G1UL42', 'Bacteroides_dorei']\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 589 features in 1 samples\n\nFeature names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_I9QXW8...UniRef90_A6LH06, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies\n\njulia> abundances(gfs_strat[1:5, 1])\n5×1 SparseArrays.SparseMatrixCSC{Float64, Int64} with 5 stored entries:\n 17556.0\n   333.333\n   333.333\n   333.333\n   333.333\n\njulia> abundances(gfs_renormed[1:5, 1])\n5×1 SparseArrays.SparseMatrixCSC{Float64, Int64} with 5 stored entries:\n 0.665379\n 0.0126335\n 0.0126335\n 0.00758008\n 0.00631673","category":"page"},{"location":"humann/#Regrouping-genes-to-other-functional-categories","page":"Working with HUMAnN","title":"Regrouping genes to other functional categories","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Similarly, if we want to regroup our uniref90s into another gene function category like ecs or KOs, we can use humann_regroup","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_rxn = humann_regroup(gfs_strat, inkind=\"uniref90\", outkind=\"rxn\")\nLoading table from: /tmp/jl_SA9rCQ\n  Treating /tmp/jl_SA9rCQ as stratified output, e.g. ['UniRef90_G1UL42', 'Bacteroides_dorei']\nLoading mapping file from: /home/kevin/.julia/conda/3/envs/biobakery/lib/python3.7/site-packages/humann/tools/../data/pathways/meta\ncyc_reactions_level4ec_only.uniref.bz2\nOriginal Feature Count: 589; Grouped 1+ times: 78 (13.2%); Grouped 2+ times: 20 (3.4%)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 174 features in 1 samples\n\nFeature names:\nUNMAPPED, UNGROUPED, 1.7.7.2-RXN...UDPNACETYLGLUCOSAMACYLTRANS-RXN, UROGENDECARBOX-RXN\n\nSample names:\ndemo_genefamilies\n\njulia> first(features(gfs_strat), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UniRef90_G1UL42\", missing)\n GeneFunction(\"UniRef90_G1UL42\", Taxon(\"Bacteroides_dorei\", :species))\n GeneFunction(\"UniRef90_I9QXW8\", missing)\n GeneFunction(\"UniRef90_I9QXW8\", Taxon(\"Bacteroides_dorei\", :species))\n\njulia> first(features(gfs_rxn), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UNGROUPED\", missing)\n GeneFunction(\"1.7.7.2-RXN\", missing)\n GeneFunction(\"1.8.1.4-RXN\", missing)\n GeneFunction(\"2.4.1.135-RXN\", missing)","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Note - to get other feature types, you may have to download the requisite databases using humann_databases at the command line. See Using Conda.jl","category":"page"},{"location":"humann/#Attaching-names-to-features","page":"Working with HUMAnN","title":"Attaching names to features","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can attach names to features using humann_rename.","category":"page"},{"location":"humann/#HUMAnN-for-multiple-samples","page":"Working with HUMAnN","title":"HUMAnN for multiple samples","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can easily run multiple files in a loop in julia. First, download the files (if you already did this in the MetaPhlAn tutorial, no need to repeat it).","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> base_url = \"https://github.com/biobakery/biobakery/raw/master/demos/biobakery_demos/data/metaphlan3/input/\";\n\njulia> files = [\n           \"SRS014476-Supragingival_plaque.fasta.gz\",\n           \"SRS014494-Posterior_fornix.fasta.gz\",\n           \"SRS014459-Stool.fasta.gz\",\n           \"SRS014464-Anterior_nares.fasta.gz\",\n           \"SRS014470-Tongue_dorsum.fasta.gz\",\n           \"SRS014472-Buccal_mucosa.fasta.gz\"\n       ];\n\njulia> for file in files\n           download(joinpath(base_url, file), file)\n       end","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Then, just write a normal loop with humann:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> for file in files\n           humann(file, \"hmp_subset\")\n       end\n[ Info: Running command: humann -i SRS014476-Supragingival_plaque.fasta.gz -o hmp_subset\nCreating output directory: /home/kevin/my_project/hmp_subset\nOutput files will be written to: /home/kevin/my_project/hmp_subset\nDecompressing gzipped file ...\n# ... etc","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"On my decently powerful laptop, this took about 10 min.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"To merge them using humann_join_tables, use the convenient julia function, humann_join:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> humann_join(\"hmp_subset\", \"hmp_subset_genefamilies.tsv\"; file_name=\"genefamilies\")\nGene table created: /home/kevin/my_project/hmp_subset_genefamilies.tsv\nProcess(`humann_join_tables -i hmp_subset -o hmp_subset_genefamilies.tsv --file_name genefamilies`, ProcessExited(0))","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"This will write a new file that you can then load with humann_profiles","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> humann_profiles(\"hmp_subset_genefamilies.tsv\"; stratified=true)\n","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Alternatively, you can load each profile into a CommunityProfile, then merge them using the Microbiome.jl function commjoin:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"# anonymous function passed to filter files that contain \"genefamilies\"\njulia> hmp_files = filter(f-> contains(f, \"genefamilies\"),\n                              readdir(\"hmp_subset\"; join=true))\n6-element Vector{String}:\n \"hmp_subset/SRS014459-Stool_genefamilies.tsv\"\n \"hmp_subset/SRS014464-Anterior_nares_genefamilies.tsv\"\n \"hmp_subset/SRS014470-Tongue_dorsum_genefamilies.tsv\"\n \"hmp_subset/SRS014472-Buccal_mucosa_genefamilies.tsv\"\n \"hmp_subset/SRS014476-Supragingival_plaque_genefamilies.tsv\"\n \"hmp_subset/SRS014494-Posterior_fornix_genefamilies.tsv\"\n\njulia> commjoin(humann_profile.(hmp_files)...)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 1 features in 6 samples\n\nFeature names:\nUNMAPPED\n\nSample names:\nSRS014459-Stool_genefamilies, SRS014464-Anterior_nares_genefamilies, SRS014470-Tongue_dorsum_genefamilies...SRS014476-Supragingival\n_plaque_genefamilies, SRS014494-Posterior_fornix_genefamilies","category":"page"},{"location":"humann/#Plotting","page":"Working with HUMAnN","title":"Plotting","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"BiobakeryUtils.jl does not come with plotting recipes (yet), but there are several excellent plotting packages that you can use. Alternatively, you can use the wrapped humann_barplot script.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"First, download the pcl file used in the HUMAnN tutorial.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> download(\"https://raw.githubusercontent.com/biobakery/biobakery/master/demos/biobakery_demos/data/humann2/input/hmp_pathabund.pcl\", \"hmp_pathabund.pcl\")","category":"page"},{"location":"humann/#Using-humann_barplot","page":"Working with HUMAnN","title":"Using humann_barplot","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"It's probably a good idea to read the tutorial link above that describes the dataset. here are the equivalent julia commands to generate the plots described there.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs = read_pcl(\"hmp_pathabund.pcl\"; last_metadata=\"STSite\")\n\n\n\njulia> humann_barplot(gfs, \"plot1.png\"; focal_metadata=\"STSite\", focal_feature=\"METSYN-PWY\")\nProcess(`humann_barplot --i /tmp/jl_tKWIfW -o plot1.png --last-metadata STSite --focal-metadata STSite --focal-feature METSYN-PWY`,\n\njulia> humann_barplot(gfs, \"plot2.png\"; focal_metadata=\"STSite\", focal_feature=\"METSYN-PWY\", \n                      sort=\"sum\")\nProcess(`humann_barplot --i /tmp/jl_vF6GHe -o plot2.png --last-metadata STSite --focal-metadata STSite --focal-feature METSYN-PWY -\n\njulia> humann_barplot(gfs, \"plot3.png\"; focal_metadata=\"STSite\", focal_feature=\"METSYN-PWY\",\n                      sort=[\"sum\", \"metadata\"],\n                      scaling=\"logstack\")\nProcess(`humann_barplot --i /tmp/jl_VVl3zD -o plot3.png --last-metadata STSite --focal-metadata STSite --focal-feature METSYN-PWY -\n-sort sum metadata --scaling logstack`, ProcessExited(0))\n\njulia> humann_barplot(gfs, \"plot4.png\"; focal_metadata=\"STSite\", focal_feature=\"COA-PWY\",\n                      sort=\"sum\")\nProcess(`humann_barplot --i /tmp/jl_XePIBD -o plot4.png --last-metadata STSite --focal-metadata STSite --focal-feature COA-PWY --so\nrt sum`, ProcessExited(0))\n\njulia> humann_barplot(gfs, \"plot5.png\"; focal_metadata=\"STSite\", focal_feature=\"COA-PWY\",\n                      sort=\"braycurtis\",\n                      scaling=\"logstack\",\n                      as_genera=true,\n                      remove_zeros=true)","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"On the last call, notice that \"flag arguments\" (eg --as-genera) that don't take arguments on the command line must be set to true in the julia version.","category":"page"},{"location":"humann/#Using-julia-plotting","page":"Working with HUMAnN","title":"Using julia plotting","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Use the read_pcl function to load the pcl file into julia, which will add all of the metadata encoded in the PCL to the resulting CommunityProfile","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs = read_pcl(\"hmp_pathabund.pcl\", last_metadata=\"STSite\")\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 5606 features in 378 samples\n\nFeature names:\n1CMET2-PWY: N10-formyl-tetrahydrofolate biosynthesis, 1CMET2-PWY: N10-formyl-tetrahydrofolate biosynthesis, 1CMET2-PWY: N10-formyl-\ntetrahydrofolate biosynthesis...VALSYN-PWY: L-valine biosynthesis, VALSYN-PWY: L-valine biosynthesis\n\nSample names:\nSRS011084, SRS011086, SRS011090...SRS058213, SRS058808\n\n\n\njulia> first(samples(gfs))\nMicrobiomeSample(\"SRS011084\", {:STSite = \"Stool\"})","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For plotting, I tend to use Makie, but there are many other options.","category":"page"},{"location":"humann/#Functions-and-types","page":"Working with HUMAnN","title":"Functions and types","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Modules = [BiobakeryUtils]\nPages = [\"humann.jl\"]","category":"page"},{"location":"humann/#BiobakeryUtils.humann","page":"Working with HUMAnN","title":"BiobakeryUtils.humann","text":"humann(inputfile, output[, flags]; kwargs...)\n\nRun humann command line tool on inputfile, putting outputs in output. Requires humann to be installed and accessible in the PATH (see Getting Started).\n\nhumann flag options (those that don't have a parameter) can be passed in an array, and other options can be passed with keyword arguments. For example, if on the command line you would run:\n\n$ humann -i $INPUTFILE -o $OUTPUT --bypass-tranlated-search --input-format fastq.gz --output-format biom\n\nusing this function, you would write:\n\nhumann(INTPUTFILE, OUTPUT, [\"bypass_translated_search\"]; input_formal=\"fastq.gz\", output_format=\"biom\")\n\n\n\n\n\n","category":"function"},{"location":"humann/#BiobakeryUtils.humann_barplot-Tuple{CommunityProfile, Any}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_barplot","text":"humann_barplot(comm::CommunityProfile, outpath; kwargs...)\n\nWrapper for humann_barplot script, to generate plots from functional data. pass keyword arguments for script options. Flag arguments should be set to true. eg\n\njulia> humann_barplot(comm, \"plot.png\"; focal_metadata=\"STSite\", focal_feature=\"COA-PWY\",\n                      sort=\"braycurtis\",\n                      scaling=\"logstack\",\n                      as_genera=true,\n                      remove_zeros=true)\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_join-Tuple{Any, Any}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_join","text":"humann_renorm(comm::AbstractDataFrame; units::String=\"cpm\")\n\nWrapper for humann_renorm_table script, to renormalize from RPKM (reads per kilobase per million) to \"cpm\" (counts per million) or \"relab\" (relative abundance).\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_profile-Tuple{AbstractString}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_profile","text":"humann_profile(path::AbstractString; sample=basename(first(splitext(path))), stratified=false)\n\nLoad a single functional profile generated by HUMAnN. By default, skips rows that have species-stratified content, use stratified=true to keep them.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_profiles-Tuple{AbstractString}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_profiles","text":"\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_regroup-Tuple{CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_regroup","text":"function humann_regroup(comm::CommunityProfile; inkind=\"uniref90\", outkind::String=\"ec\")\n\nWrapper for humann_regroup_table script to convert table from one kind of functional mapping to another.\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_rename-Tuple{CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_rename","text":"humann_rename(comm::AbstractDataFrame; kind::String=\"ec\")\n\nWrapper for humann_rename_table script, returning a CommunityProfile with re-named features.\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_renorm-Tuple{CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_renorm","text":"humann_renorm(comm::AbstractDataFrame; units::String=\"cpm\")\n\nWrapper for humann_renorm_table script, to renormalize from RPKM (reads per kilobase per million) to \"cpm\" (counts per million) or \"relab\" (relative abundance).\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.read_pcl-Tuple{Any}","page":"Working with HUMAnN","title":"BiobakeryUtils.read_pcl","text":"read_pcl(infile; last_metadata=2)\n\nReads a PCL file and generates a CommunityProfile with metadata attached to the samples.\n\nlast_metadata may be a row number or a string representing the final metadatum.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.write_pcl-Tuple{Any, CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.write_pcl","text":"write_pcl(infile; usemetadata=:all)\n\nWrites a PCL file from a CommunityProfile with metadata attached to the samples.\n\nusemetadata may be :all  or a vector of symbols.\n\n\n\n\n\n","category":"method"},{"location":"humann/#Reexported-from-[Microbiome.jl]","page":"Working with HUMAnN","title":"Reexported from [Microbiome.jl]","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Microbiome.name\nMicrobiome.CommunityProfile\nMicrobiome.GeneFunction","category":"page"},{"location":"humann/#Microbiome.name","page":"Working with HUMAnN","title":"Microbiome.name","text":"name(t::Union{AbstractSample, AbstractFeature})\n\nGet the name field from an AbstractSample or AbstractFeature.\n\n\n\n\n\n","category":"function"},{"location":"humann/#Microbiome.CommunityProfile","page":"Working with HUMAnN","title":"Microbiome.CommunityProfile","text":"CommunityProfile{T, F, S} <: AbstractAbundanceTable{T, F, S}\n\nAn AbstractAssemblage from EcoBase.jl that uses an AxisArray of a SparseMatrixCSC under the hood.\n\nCommunityProfiles are tables with AbstractFeature-indexed rows and AbstractSample-indexed columns. Note - we can use the name of samples and features to index.\n\njulia> txs = [Taxon(\"taxon$i\") for i in 1:10];\n\njulia> mss = [MicrobiomeSample(\"sample$i\") for i in 1:5];\n\njulia> mat = spzeros(10,5);\n\njulia> for i in 1:5; mat[i,i] = 1.; end\n\njulia> comm = CommunityProfile(mat, txs, mss)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 10 features in 5 samples\n\nFeature names:\ntaxon1, taxon2, taxon3...taxon9, taxon10\n\nSample names:\nsample1, sample2, sample3, sample4, sample5\n\njulia> comm[\"taxon1\", \"sample1\"]\n1.0\n\njulia> comm[:,[\"sample1\", \"sample5\"]]\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 10 features in 2 samples\n\nFeature names:\ntaxon1, taxon2, taxon3...taxon9, taxon10\n\nSample names:\nsample1, sample5\n\njulia> comm[Taxon(\"taxon3\", :kingdom), \"sample1\"]\n0.0\n\n\n\n\n\n","category":"type"},{"location":"humann/#Microbiome.GeneFunction","page":"Working with HUMAnN","title":"Microbiome.GeneFunction","text":"GeneFunction(name::String, taxon::Union{Taxon, String, Missing}) <: AbstractFeature\nGeneFunction(name::String)\n\nMicrobial gene function object with optional stratification (taxon).\n\n\n\n\n\n","category":"type"},{"location":"#BiobakeryUtils","page":"BiobakeryUtils","title":"BiobakeryUtils","text":"","category":"section"},{"location":"#Contents","page":"BiobakeryUtils","title":"Contents","text":"","category":"section"},{"location":"","page":"BiobakeryUtils","title":"BiobakeryUtils","text":"Pages = [\"gettingstarted.md\", \"general.md\", \"metaphlan.md\", \"humann.md\"]\nDepth = 6","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"CurrentModule = BiobakeryUtils\nDocTestSetup  = quote\n    using BiobakeryUtils\n    using BiobakeryUtils.Conda\n    BiobakeryUtils.install_deps()\n    ENV[\"PATH\"] = ENV[\"PATH\"] * Conda.bind_dir(:BiobakeryUtils)\nend","category":"page"},{"location":"metaphlan/#metaphlan-tutorial","page":"Working with MetaPhlAn","title":"MetaPhlAn Tutorial with BiobakeryUtils.jl","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"🗒️ This tutorial is meant to be run in parallel with / mirror the official MetaPhlAn v3 tutorial\n❓️ If you have questions about MetaPhlAn itself, please direct them to the bioBakery help forum\n🤔 If you have questions about using the MetaPhlAn tools in julia, please open an issue), or start a discussion over on Microbiome.jl)!\n📔 For a function / type reference, jump to the bottom","category":"page"},{"location":"metaphlan/#Installation-and-setup","page":"Working with MetaPhlAn","title":"Installation and setup","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"If you haven't already, check out the \"Getting Started\" page to install julia, create an environment,xd and install BiobakeryUtils.jl, and hook up or install the MetaPhlAn v3 command line tools.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"This tutorial assumes:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"You are running julia v1.6 or greater\nYou have activated a julia Project that has BiobakeryUtils.jl installed\nThe metaphlan python package is installed, and accessible from your PATH.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"If any of those things aren't true, or you don't know if they're true, go back to \"Getting Started\" to see if you skipped a step. If you're still confused, please ask (see 3rd bullet point at the top)!","category":"page"},{"location":"metaphlan/#Bowtie2-database","page":"Working with MetaPhlAn","title":"Bowtie2 database","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"The first time you run metaphlan, it needs to download and unpack the marker database. If you don't care where this goes, don't worry about it - by default it will go into a subdirectory of your conda environment.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"If your home folder has limited space, or you want to install it to a particular location (eg a faster drive), you can either pass the kewword argument bowtie2db=\"/path/to/location\" to all metaphlan commands, or set the environment variable METAPHLAN_BOWTIE2_DB.","category":"page"},{"location":"metaphlan/#Input-files","page":"Working with MetaPhlAn","title":"Input files","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Some example files you can use to run this tutorial are available from the MetaPhlAn repo, and can be downloaded using the Downloads standard library in julia:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> using Downloads: download\n\njulia> base_url = \"https://github.com/biobakery/biobakery/raw/master/demos/biobakery_demos/data/metaphlan3/input/\";\n\njulia>  files = [\n    \"SRS014476-Supragingival_plaque.fasta.gz\",\n    \"SRS014494-Posterior_fornix.fasta.gz\",\n    \"SRS014459-Stool.fasta.gz\",\n    \"SRS014464-Anterior_nares.fasta.gz\",\n    \"SRS014470-Tongue_dorsum.fasta.gz\",\n    \"SRS014472-Buccal_mucosa.fasta.gz\"\n];\n\njulia> for file in files\n           download(joinpath(base_url, file), file)\n       end\n\njulia> readdir()\n9-element Vector{String}:\n \"Manifest.toml\"\n \"Project.toml\"\n \"SRS014459-Stool.fasta.gz\"\n \"SRS014464-Anterior_nares.fasta.gz\"\n \"SRS014470-Tongue_dorsum.fasta.gz\"\n \"SRS014472-Buccal_mucosa.fasta.gz\"\n \"SRS014476-Supragingival_plaque.fasta.gz\"\n \"SRS014494-Posterior_fornix.fasta.gz\"","category":"page"},{"location":"metaphlan/#Run-a-single-sample","page":"Working with MetaPhlAn","title":"Run a single sample","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"For convenience, this package has the metaphlan() function, which can be used in your julia scripts to build and call the metaphlan command line tool.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"For example, rather than call this from the shell:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"$ metaphlan SRS014476-Supragingival_plaque.fasta.gz --input_type fasta > SRS014476-Supragingival_plaque_profile.txt","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"you can instead call this from the julia REPL:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> metaphlan(\"SRS014476-Supragingival_plaque.fasta.gz\",\n                 \"SRS014476-Supragingival_plaque_profile.tsv\"; input_type=\"fasta\")","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"The first time you run this command, metaphlan will download its database and build Bowtie2 indices for aligning marker genes. It may take a while... maybe go for a walk 🙂.","category":"page"},{"location":"metaphlan/#Output-files","page":"Working with MetaPhlAn","title":"Output files","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"load output with metaphlan_profile\ninvestigate with various functions (try to show similar things as tutorial)","category":"page"},{"location":"metaphlan/#Run-on-multiple-cores","page":"Working with MetaPhlAn","title":"Run on multiple cores","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/#metaphlan-multi","page":"Working with MetaPhlAn","title":"Run multiple samples","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/#Merge-outputs","page":"Working with MetaPhlAn","title":"Merge outputs","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"use metaphlan_profile in loop and then commjoin\nuse metaphlan_profiles","category":"page"},{"location":"metaphlan/#Visualize-results","page":"Working with MetaPhlAn","title":"Visualize results","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Kevin should probably handle this part","category":"page"},{"location":"metaphlan/#Functions-and-Types","page":"Working with MetaPhlAn","title":"Functions and Types","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Modules = [BiobakeryUtils]\nPages = [\"metaphlan.jl\"]","category":"page"},{"location":"metaphlan/#BiobakeryUtils.metaphlan-Tuple{Any, Any}","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan","text":"metaphlan(inputfile, outputfile; kwargs...)\n\nRun metaphlan command line tool on inputfile, creating output. Requires metaphlan to be installed and accessible in the PATH (see Getting Started).\n\nmetaphlan options can be passed via keyword arguments. For example, if on the command line you would run:\n\n$ metaphlan some.fastq.gz output/some_profile.tsv --input_type fastq --nprocs 8\n\nusing this function, you would write:\n\nmetaphlan(\"some.fastq.gz\", \"output/some_profile.tsv\"; input_type=\"fastq\", nprocs=8)\n\nNote: the input_type keyword is required.\n\nSet the environmental variable \"METAPHLANBOWTIE2DB\" to specify the location where the markergene database is/will be installed, or pass bowtie2db = \"some/path\" as a keyword argument.\n\n\n\n\n\n","category":"method"},{"location":"metaphlan/#BiobakeryUtils.metaphlan_profile","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan_profile","text":"metaphlan_profile(path::AbstractString, level::Union{Int, Symbol}=:all; sample::AbstractString=basename(first(splitext(path))))\n\nCompiles a MetaPhlAn file into a CommunityProfile. Can select data according to taxonomic level. If level not given, all data is compiled. Sample name of the CommunityProfile can be specified by passing a sample argument. If name not given, the name of the file becomes the Sample name.\n\nLevels may be given either as numbers or symbols:\n\n1 = :kingdom\n2 = :phylum\n3 = :class\n4 = :order\n5 = :family\n6 = :genus\n7 = :species\n8 = :subspecies\n\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\njulia> metaphlan_profile(\"test/files/metaphlan_single2.tsv\")\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 96 features in 1 samples\n\nFeature names:\nBacteria, Archaea, Firmicutes...Ruminococcus_bromii, Bacteroides_vulgatus\n\nSample names:\nmetaphlan_single2\n\n\n\njulia> metaphlan_profile(\"test/files/metaphlan_single2.tsv\", 4)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 11 features in 1 samples\n\nFeature names:\nClostridiales, Bacteroidales, Coriobacteriales...Firmicutes_unclassified, Pasteurellales\n\nSample names:\nmetaphlan_single2\n\n\n\njulia> metaphlan_profile(\"test/files/metaphlan_single2.tsv\", :genus)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 40 features in 1 samples\n\nFeature names:\nPrevotella, Roseburia, Faecalibacterium...Haemophilus, Lactococcus\n\nSample names:\nmetaphlan_single2\n\n\n\njulia> metaphlan_profile(\"test/files/metaphlan_single2.tsv\", :genus, sample = \"sample2\")\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 40 features in 1 samples\n\nFeature names:\nPrevotella, Roseburia, Faecalibacterium...Haemophilus, Lactococcus\n\nSample names:\nsample2\n\n\n\n\n\n","category":"function"},{"location":"metaphlan/#BiobakeryUtils.metaphlan_profiles","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan_profiles","text":"metaphlan_profiles(paths::Array{<:AbstractString, 1}, level::Union{Int, Symbol}=:all)\n\nCompiles MetaPhlAn profiles from multiple single tables into a CommunityProfile.\n\nExamples ≡≡≡≡≡≡≡≡≡≡\n\njulia> metaphlan_profiles([\"test/files/metaphlan_single1.tsv\", \"test/files/metaphlan_single2.tsv\"])\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 129 features in 2 samples\n\nFeature names:\nBacteria, Firmicutes, Bacteroidetes...Coprococcus_eutactus, Ruminococcus_bromii\n\nSample names:\nmetaphlan_single1, metaphlan_single2\n\n\n\njulia> metaphlan_profiles([\"test/files/metaphlan_single1.tsv\", \"test/files/metaphlan_single2.tsv\"], :genus)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 46 features in 2 samples\n\nFeature names:\nBacteroides, Roseburia, Faecalibacterium...Ruthenibacterium, Haemophilus\n\nSample names:\nmetaphlan_single1, metaphlan_single2\n\n\n\njulia> metaphlan_profiles([\"test/files/metaphlan_single1.tsv\", \"test/files/metaphlan_single2.tsv\"], 5)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 24 features in 2 samples\n\nFeature names:\nLachnospiraceae, Ruminococcaceae, Bacteroidaceae...Clostridiales_unclassified, Pasteurellaceae\n\nSample names:\nmetaphlan_single1, metaphlan_single2\n\n\n\n\n\n","category":"function"},{"location":"metaphlan/#BiobakeryUtils.metaphlan_profiles-2","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan_profiles","text":"metaphlan_profiles(path::AbstractString, level::Union{Int, Symbol}=:all; keepunidentified=false)\n\nCompiles MetaPhlAn profiles from a merged table into a CommunityProfile. Can select data according to taxonomic level. If level not given, all data is compiled. Set keepunidentified flag to true to keep UNIDENTIFIED data.\n\nLevels may be given either as numbers or symbols:\n\n1 = :kingdom\n2 = :phylum\n3 = :class\n4 = :order\n5 = :family\n6 = :genus\n7 = :species\n8 = :subspecies\n\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\njulia> metaphlan_profiles(\"test/files/metaphlan_multi_test.tsv\")\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 42 features in 7 samples\n\nFeature names:\nArchaea, Euryarchaeota, Methanobacteria...Actinomyces_viscosus, GCF_000175315\n\nSample names:\nsample1_taxonomic, sample2_taxonomic, sample3_taxonomic...sample6_taxonomic, sample7_taxonomic\n\n\n\njulia> metaphlan_profiles(\"test/files/metaphlan_multi_test.tsv\", :genus)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 3 features in 7 samples\n\nFeature names:\nMethanobrevibacter, Methanosphaera, Actinomyces\n\nSample names:\nsample1_taxonomic, sample2_taxonomic, sample3_taxonomic...sample6_taxonomic, sample7_taxonomic\n\n\n\njulia> metaphlan_profiles(\"test/files/metaphlan_multi_test.tsv\", 3)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 2 features in 7 samples\n\nFeature names:\nMethanobacteria, Actinobacteria\n\nSample names:\nsample1_taxonomic, sample2_taxonomic, sample3_taxonomic...sample6_taxonomic, sample7_taxonomic\n\n\njulia> metaphlan_profiles(\"test/files/metaphlan_multi_test_unidentified.tsv\")\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 43 features in 7 samples\n\nFeature names:\nUNIDENTIFIED, Archaea, Euryarchaeota...Actinomyces_viscosus, GCF_000175315\n\nSample names:\nsample1_taxonomic, sample2_taxonomic, sample3_taxonomic...sample6_taxonomic, sample7_taxonomic\n\n\n\n# julia> metaphlan_profiles(\"test/files/metaphlan_multi_test_unidentified.tsv\", keepunidentified = true)\n# CommunityProfile{Float64, Taxon, MicrobiomeSample} with 43 features in 7 samples\n\n# Feature names:\n# UNIDENTIFIED, Archaea, Euryarchaeota...Actinomyces_viscosus, GCF_000175315\n\n# Sample names:\n# sample1_taxonomic, sample2_taxonomic, sample3_taxonomic...sample6_taxonomic, sample7_taxonomic\n\n\n\n\n\n","category":"function"},{"location":"metaphlan/#BiobakeryUtils.parsetaxa-Tuple{AbstractString}","page":"Working with MetaPhlAn","title":"BiobakeryUtils.parsetaxa","text":"parsetaxa(taxstring::AbstractString; throw_error=true)\n\nGiven a string representing taxonmic levels as formatted by MetaPhlAn (eg \"kBacteria|pProteobacteria...\"), separates taxonomic levels into elements of type Taxon in a vector.\n\nExamples ≡≡≡≡≡≡≡≡≡≡\n\njulia> parsetaxa(\"k__Archaea|p__Euryarchaeota|c__Methanobacteria\"; throw_error = true)\n3-element Vector{Taxon}:\n Taxon(\"Archaea\", :kingdom)\n Taxon(\"Euryarchaeota\", :phylum)\n Taxon(\"Methanobacteria\", :class)\n\n\n\n\n\n","category":"method"},{"location":"metaphlan/#BiobakeryUtils.parsetaxon-Tuple{AbstractString}","page":"Working with MetaPhlAn","title":"BiobakeryUtils.parsetaxon","text":"parsetaxon(taxstring::AbstractString, taxlevel::Union{Int, Symbol})\n\nFinds given taxonomic level in a string (as formatted by MetaPhlAn (eg \"kBacteria|pProteobacteria...\")) and returns the clade and taxonomic level as a Taxon. If taxon level not given, function will return the most specific (lowest) taxonomic level available.\n\nLevels may be given either as numbers or symbols:\n\n1 = :kingdom\n2 = :phylum\n3 = :class\n4 = :order\n5 = :family\n6 = :genus\n7 = :species\n8 = :subspecies\n\nExamples ≡≡≡≡≡≡≡≡≡≡\n\njulia> parsetaxon(\"k__Archaea|p__Euryarchaeota|c__Methanobacteria\", 2)\nTaxon(\"Euryarchaeota\", :phylum)\n\njulia> parsetaxon(\"k__Archaea|p__Euryarchaeota|c__Methanobacteria\", :kingdom)\nTaxon(\"Archaea\", :kingdom)\n\njulia> parsetaxon(\"k__Archaea|p__Euryarchaeota|c__Methanobacteria\")\nTaxon(\"Methanobacteria\", :class)\n\n\n\n\n\n","category":"method"}]
}
