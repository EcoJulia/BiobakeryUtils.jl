var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = BiobakeryUtils","category":"page"},{"location":"gettingstarted/#getting-started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This is a package for the julia programming language, designed for working with the bioBakery family of tools for metagenomic analysis of microbial communities. Currently, we support MetaPhlAn and HUMAnN.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Read on to learn how to install the package and use it to begin using it to uncover insights about your microbial community data! If you run into problems, you can open an issue on this repository, or start a discussion over on Microbiome.jl.","category":"page"},{"location":"gettingstarted/#Installing-julia","page":"Getting Started","title":"Installing julia","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If this is your first time using julia, you'll need to install it by going to the julia downloads page and following the instructions for your platform. BiobakeryUtils.jl should work on any julia version >= 1.6.0.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Alternatively, you can you jill.py, which is an easy-to-use python utility for installing julia.","category":"page"},{"location":"gettingstarted/#Launching-julia-from-the-terminal","page":"Getting Started","title":"Launching julia from the terminal","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you download the \"app\" versions of julia from the downloads page above, you may also want to add julia to your shell's $PATH so that you can launch it from your terminal. For windows users, you can look look here for instructions. Mac users, see here for instructions.","category":"page"},{"location":"gettingstarted/#Making-a-project","page":"Getting Started","title":"Making a project","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"In julia, it's typically a good idea to use \"projects\" to organize your package dependencies (this is similar to \"environments\" that conda uses).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To do this, make a directory and \"activate\" it in the julia Pkg REPL.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"$ mkdir my_project\n\n$ cd my_project\n\n$ julia\n\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.1 (2021-04-23)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia> # press ] to enter the Pkg REPL\n\n(@v1.6) pkg> activate .\n  Activating new environment at `~/my_project/Project.toml`\n\n(my_project) pkg> # press backspace to get back to julia REPL\n\njulia>","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: asciicast)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"So far, this is still just an empty directory, but you can also use the Pkg REPL to install packages, like BiobakeryUtils.jl.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(my_project) pkg> add BiobakeryUtils","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: asciicast)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Once this process completes, the directory will now contain a Project.toml file that contains BiobakeryUtils.jl as a dependency, and a Manifest.toml file that contains all of the exact info about dependencies installed for this environment.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"In the future, you can launch julia with the environment already activated using julia --project if your working directory is my_project/, or julia --project=<path to project> if you're in a different working directory (eg. julia --project=~/my_project if my_project/ is in the home directory).","category":"page"},{"location":"gettingstarted/#Using-bioBakery-command-line-tools","page":"Getting Started","title":"Using bioBakery command line tools","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Some functions provided by this package (eg humann_regroup and humann_rename), require the appropriate bioBakery tools to be installed and accessible from the julia shell environment. The easiest way to do this is to use Conda.jl, though other installation methods are possible as well.","category":"page"},{"location":"gettingstarted/#Using-a-previous-installation","page":"Getting Started","title":"Using a previous installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you have a previous installation of metaphlan and/or humann, you can tell julia to use them by modifying the $PATH environment variable.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Environment variables in julia are stored in a Dict called ENV. For example, the $PATH variable in Unix tells the shell where to look for executable programs, and is available in julia using ENV[\"PATH\"]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PATH\"]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you launch julia from the shell, this variable is automatically populated with the same $PATH, so if you can access humann or metaphlan from your shell, then launch julia, you should be all set (eg, if you've installed them with miniconda, and you do conda activate envname, then launch julia from the same shell, they should already be available).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If not, you need to identify where humann or metaphlan executables are located, then add that location to ENV[\"PATH\"] (delimeted by :). For example, if the humann executable is found at /home/kevin/.local/bin, you would run:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PATH\"] = ENV[\"PATH\"] * \":\" * \"/home/kevin/.local/bin\"","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you don't know where your installation is located, from the terminal, you can use the which command:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"$ which humann\n/home/kevin/.local/bin/humann","category":"page"},{"location":"gettingstarted/#using-conda","page":"Getting Started","title":"Using Conda.jl","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you don't have a previous installation, you can use Conda.jl to install the necessary tools.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This can be done automatically for you using BiobakeryUtils.install_deps().","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> BiobakeryUtils.install_deps()\n[ Info: Running conda create -y -p /home/kevin/.julia/conda/3/envs/BiobakeryUtils in root environment\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n## Package Plan ##\n\n  environment location: /home/kevin/.julia/conda/3/envs/BiobakeryUtils\n\n\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: **done**\n# ... etc","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"BiobakeryUtils.install_deps()","category":"page"},{"location":"gettingstarted/#BiobakeryUtils.install_deps-Tuple{}","page":"Getting Started","title":"BiobakeryUtils.install_deps","text":"install_deps([env]; [force=false])\n\nUses Conda.jl to install HUMAnN and MetaPhlAn. In order to use the commandline tools, you must have the conda environment bin directory in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Or you can do it manually. First install Conda.jl in your environment using the Pkg REPL (accessible by typing ] in the julia REPL - press <backspace> to get back to the regular REPL).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"$ cd my_project/\n\n$ julia --project\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.1 (2021-04-23)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia> # press ']'\n\n(my_project) pkg> add Conda\n    Updating registry at `~/.julia/registries/General`\n   Resolving package versions...\n    Updating `~/.julia/dev/BiobakeryUtils/my_project/Project.toml`\n  [8f4d0f93] + Conda v1.5.2\n    Updating `~/.julia/dev/BiobakeryUtils/my_project/Manifest.toml`\n  [8f4d0f93] + Conda v1.5.2\n  [682c06a0] + JSON v0.21.2\n  [69de0a69] + Parsers v2.0.4\n  [81def892] + VersionParsing v1.2.0\n  [ade2ca70] + Dates\n  [a63ad114] + Mmap\n  [de0858da] + Printf\n  [4ec0a83e] + Unicode\n\njulia> using Conda","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"First, you'll need to add \"channels\" to a new Conda environment. The order here is important. Assuming you want your environment to be called biobakery:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> Conda.add_channel(\"bioconda\", :biobakery)\n┌ Info: Running conda config --add channels bioconda --file /home/kevin/.julia/conda/3/envs/biobakery/condarc-julia.yml --force\n└ in biobakery environment\n# ...\n\njulia> Conda.add_channel(\"conda-forge\", :biobakery)\n┌ Info: Running conda config --add channels conda-forge --file /home/kevin/.julia/conda/3/envs/biobakery/condarc-julia.yml\n└ --force in biobakery environment\n# ...\n\njulia> Conda.add(\"humann\", :biobakery)\n[ Info: Running conda install -y -c bioconda humann in biobakery environment\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n# ...\n\njulia> Conda.add(\"metaphlan\", :biobakery; channel=\"bioconda\")\n[ Info: Running conda install -y -c bioconda metaphlan in biobakery environment\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n# ...","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(Image: asciicast)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"By default, Conda.jl puts environments into ~/.julia/conda/envs/<env name>/bin, which you can get with Conda.bin_dir(), so in this case, you'd next want to run","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PATH\"] = ENV[\"PATH\"] * \":\" * Conda.bin_dir(:BiobakeryUtils)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Note 1: if you need to manually edit ENV[\"PATH\"] like this, you'll need to do this each time you load julia. To get around this, you can modify you shell's $PATH variable, or use direnv to set it on a per-directory basis.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Note 2: If following this docs you get ERROR: UndefVarError: Conda not definedtry installing and loadingConda.jl ","category":"page"},{"location":"gettingstarted/#Using-MetaPhlAn-and-HUMAnN","page":"Getting Started","title":"Using MetaPhlAn and HUMAnN","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"You should now be ready to start using MetaPhlAn and HUMAnN from julia! Take a look at the MetaPhlAn tutorial or HUMAnN tutorial for next steps.","category":"page"},{"location":"gettingstarted/#Troubleshooting","page":"Getting Started","title":"Troubleshooting","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"So, you followed all the steps above, and you're still having problems? There are a couple of common things that can go wrong.","category":"page"},{"location":"gettingstarted/#Cannot-find-{program}","page":"Getting Started","title":"Cannot find {program}","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you get an error that looks like this:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"┌ Error: Can not find metaphlan! If you think it should be\n│ installed, try running:\n│\n│ ENV[\"PATH\"] = ENV[\"PATH\"] * \":\" * Conda.bin_dir(env)\n│\n│\n│ Where env is something like :BiobakeryUtils.\n└ @ BiobakeryUtils /home/kevin/.julia/dev/BiobakeryUtils/src/uti\nls.jl:55\nERROR: failed process: Process(`which metaphlan`, ProcessExited(\n1)) [1]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Then the relevant program is not being found in your ENV[\"PATH\"].","category":"page"},{"location":"gettingstarted/#.-Check-that-path-to-biobakery-executables-is-in-ENV[\"PATH\"]","page":"Getting Started","title":"1. Check that path to biobakery executables is in ENV[\"PATH\"]","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"At the julia REPL, just enter ENV[\"PATH\"] and press <kbd>Enter</kbd>.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> ENV[\"PATH\"]\n\"/home/kevin/.local/bin:/home/kevin/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:\n/bin\"","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Somewhere in the string should be your conda installation.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If not, follow the advice in the error message; that is, run ENV[\"PATH\"] = ENV[\"PATH\"] * \":\" * Conda.bin_dir(env), where env in the call to Conda.bin_dir() is the name of your environment (if you installed things with BiobakeryUtils.install_deps(), the default is :BiobakeryUtils).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Alternatively, if you didn't use Conda.jl or BiobakeryUtils.install_deps(), and have a different conda installation you're using, replace Conda.bin_dir(env) with the path, eg ENV[\"PATH\"] = ENV[\"PATH\"] * \":\" * \"/Users/yourname/miniconda3/envs/biobakery/bin\".","category":"page"},{"location":"gettingstarted/#environment-conflict","page":"Getting Started","title":"2. Check if a different installation is interfering","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To find a program to run, the shell looks through your PATH variable at each directory for a matching program. For example, if your ENV[\"PATH\"] looks like:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"\"/Users/yourname/miniconda3/envs/other_project/bin:/usr/bin/:/Users/yourname/.julia/conda/3/envs/BiobakeryUtils/bin\"","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The shell will look in this order:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"/Users/yourname/miniconda3/envs/other_project/bin\n/usr/bin/\n/Users/yourname/.julia/conda/3/envs/BiobakeryUtils/bin","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If, for example, you have metaphlan installed in (1) other_project/bin, but intend to use (3) BiobakeryUtils/bin, you might run into issues. In this case, you can add (3) to the front of your path so that it's reached first, eg:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"ENV[\"PATH\"] = \"/Users/yourname/.julia/conda/3/envs/BiobakeryUtils/bin\" * \":\" * ENV[\"PATH\"]","category":"page"},{"location":"gettingstarted/#Error-involving-bowtie2","page":"Getting Started","title":"Error involving bowtie2","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you run metaphlan() or humann(), things start out looking ok, then you get a long error message that includes something like","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"subprocess.CalledProcessError: Command '['bowtie2-build', '--usage']' returned non-zero exit status 250.\nERROR: failed process: Process(`metaphlan samplename.fasta samplename_profile.tsv --input_type fasta`, ProcessExited(1)) [1]","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"buried in the stack trace, you probably have a problem with tbb.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The default bowtie2 installation installs a version of tbb that doesn't work properly, so you need to pin it to an earlier version to make it work (see here).","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you installed using BiobakeryUtils.install_deps(), this should have been done already, and you might be having this problem.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If you used a different installation method, you can try","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"$ conda install tbb=2020.2","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"or ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> Conda.add(\"tbb=2020.2\", env; channel=\"conda-forge\")","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"(replace env with the name of your conda environment)","category":"page"},{"location":"gettingstarted/#Still-having-issues?","page":"Getting Started","title":"Still having issues?","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"If your issue isn't addressed here, or you're still having problems, please open an issue or start a discussion over on Microbiome.jl.","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"CurrentModule = BiobakeryUtils\nDocTestSetup  = quote\n    using BiobakeryUtils\n    using BiobakeryUtils.Conda\n    BiobakeryUtils.install_deps()\n    ENV[\"PATH\"] = ENV[\"PATH\"] * Conda.bind_dir(:BiobakeryUtils)\nend","category":"page"},{"location":"kneaddata/#kneaddata-tutorial","page":"Working with KneadData","title":"KneadData Tutorial with BiobakeryUtils.jl","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"🗒️ This tutorial is meant to be run in parallel with / mirror the official KneadData\n❓️ If you have questions about MetaPhlAn itself, please direct them to the bioBakery help forum\n🤔 If you have questions about using the MetaPhlAn tools in julia, please open an issue, or start a discussion over on Microbiome.jl!\n📔 For a function / type reference, jump to the bottom","category":"page"},{"location":"kneaddata/#Installation-and-setup","page":"Working with KneadData","title":"Installation and setup","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"If you haven't already, check out the \"Getting Started\" page to install julia, create an environment,xd and install BiobakeryUtils.jl, and hook up or install the MetaPhlAn v3 command line tools.","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"This tutorial assumes:","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"You are running julia v1.6 or greater\nYou have activated a julia Project that has BiobakeryUtils.jl installed\nThe kneaddata python package is installed, and accessible from your PATH.","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"If any of those things aren't true, or you don't know if they're true, go back to \"Getting Started\" to see if you skipped a step. If you're still confused, please ask (see 3rd bullet point at the top)!","category":"page"},{"location":"kneaddata/#Contamination-databases","page":"Working with KneadData","title":"Contamination databases","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"By default, kneaddata will only trim reads based on quality scores. If you would also like to remove contaminating sequences (eg from human or mouse DNA reads), you'll need to download them.","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"BiobakeryUtils.kneaddata_database","category":"page"},{"location":"kneaddata/#BiobakeryUtils.kneaddata_database","page":"Working with KneadData","title":"BiobakeryUtils.kneaddata_database","text":"kneaddata_database(db, kind, path)\n\nSee kneaddata_database --help\n\nkneaddata_database(\"human_genome\", \"bowtie2\", \"/some/database/dir/\")\n\n\n\n\n\n","category":"function"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"To see what databases are available, you need to use the command line, kneaddata_database --available.","category":"page"},{"location":"kneaddata/#Demo-files","page":"Working with KneadData","title":"Demo files","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"The demo files for the kneaddata tutorial can be found in this package's test folder, which you can find with","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"julia> demo = abspath(joinpath(dirname(Base.find_package(\"BiobakeryUtils\")), \"..\", \"test\", \"files\", \"kneaddata\"));\n\njulia> readdir(demo)\n10-element Vector{String}:\n \"SE_extra.fastq\"\n \"demo_db.1.bt2\"\n \"demo_db.2.bt2\"\n \"demo_db.3.bt2\"\n \"demo_db.4.bt2\"\n \"demo_db.rev.1.bt2\"\n \"demo_db.rev.2.bt2\"\n \"seq1.fastq\"\n \"seq2.fastq\"\n \"singleEnd.fastq\"","category":"page"},{"location":"kneaddata/#Running-on-a-single-end-sequencing-data","page":"Working with KneadData","title":"Running on a single-end sequencing data","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"Official tutorial link","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"You can use the kneaddata commandline tool using the kneaddata() function from BiobakeryUtils.jl","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"julia> kneaddata(joinpath(demo, \"singleEnd.fastq\"), \"kneaddataOutputSingleEnd\"; reference_db=joinpath(demo, \"demo_db\"))\n┌ Info: Running command: kneaddata -i /home/kevin/.julia/dev/BiobakeryUtils/test/files/kneaddata/singleEnd.fastq -o\n│ kneaddataOutputSingleEnd --trimmomatic /home/kevin/.julia/conda/3/envs/BiobakeryUtils/share/trimmomatic -db\n└ /home/kevin/.julia/dev/BiobakeryUtils/test/files/kneaddata/demo_db\nReformatting file sequence identifiers ...\n\nInitial number of reads ( /tmp/jl_JXPuAs/kneaddataOutputSingleEnd/reformatted_identifiersjlcp_ry6_singleEnd ): 16902.0\n# ... etc","category":"page"},{"location":"kneaddata/#Running-on-paired-end-sequencing-data","page":"Working with KneadData","title":"Running on paired-end sequencing data","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"Official tutorial link","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"To run on paired end data, simply pass an array of file paths to the input argument.","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"julia> kneaddata([joinpath(demo, \"seq1.fastq\"), joinpath(demo, \"seq2.fastq\")],\n                   \"kneaddataOutputPairedEnd\"; reference_db=joinpath(demo, \"demo_db\"))\n┌ Info: Running command: kneaddata -i /home/kevin/.julia/dev/BiobakeryUtils/test/files/kneaddata/seq1.fastq -i\n│ /home/kevin/.julia/dev/BiobakeryUtils/test/files/kneaddata/seq2.fastq -o kneaddataOutputPairedEnd --trimmomatic\n│ /home/kevin/.julia/conda/3/envs/BiobakeryUtils/share/trimmomatic -db\n└ /home/kevin/.julia/dev/BiobakeryUtils/test/files/kneaddata/demo_db\nInitial number of reads ( /home/kevin/.julia/dev/BiobakeryUtils/test/files/kneaddata/seq1.fastq ): 42473.0\nInitial number of reads ( /home/kevin/.julia/dev/BiobakeryUtils/test/files/kneaddata/seq2.fastq ): 42473.0\nRunning Trimmomatic ...\nTotal reads after trimming ( /tmp/jl_JXPuAs/kneaddataOutputPairedEnd/seq1_kneaddata.trimmed.1.fastq ): 35341.0\nTotal reads after trimming ( /tmp/jl_JXPuAs/kneaddataOutputPairedEnd/seq1_kneaddata.trimmed.2.fastq ): 35341.0\nTotal reads after trimming ( /tmp/jl_JXPuAs/kneaddataOutputPairedEnd/seq1_kneaddata.trimmed.single.1.fastq ): 5385.0\nTotal reads after trimming ( /tmp/jl_JXPuAs/kneaddataOutputPairedEnd/seq1_kneaddata.trimmed.single.2.fastq ): 847.0","category":"page"},{"location":"kneaddata/#Changing-Defaults","page":"Working with KneadData","title":"Changing Defaults","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"Official tutorial link","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"To use the default-altering options, pass them as key words to the kneaddata() function.","category":"page"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"Eg, to set maximum memory utilization to 200 Mb, add max_memory=\"200m\" to the function call.","category":"page"},{"location":"kneaddata/#API-Reference","page":"Working with KneadData","title":"API Reference","text":"","category":"section"},{"location":"kneaddata/","page":"Working with KneadData","title":"Working with KneadData","text":"kneaddata","category":"page"},{"location":"kneaddata/#BiobakeryUtils.kneaddata","page":"Working with KneadData","title":"BiobakeryUtils.kneaddata","text":"kneaddata(inputfile, outputfile; kwargs...)\n\nRun kneaddata command line tool on inputfile, creating outputfile. Requires kneaddata to be installed and accessible in the PATH (see Getting Started).\n\nkneaddata options can be passed via keyword arguments. For example, if on the command line you would run:\n\n$ kneaddata -i some.fastq.gz -o test --n 8 --bypass-trim\n\nusing this function, you would write:\n\nkneaddata(\"some.fastq.gz\", \"test\"; n = 8, bypass_trim=true)\n\nTo pass multiple databases, pass an array of paths to the reference_db argument\n\nConda installations of trimmomatic (a dependency of kneaddata) don't work properly out of the box. If you have installed kneaddata using commandline conda (instead of Conda.jl), use trimmomatic = /path/to/trimmomatic, where /path/to/trimmomatic is something like /home/username/miniconda3/envs/biobakery3/share/trimmomatic. If you used BiobakeryUtils.install_deps(), you don't need to worry about this.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.jl-functions","page":"Microbiome.jl Docstrings","title":"Microbiome.jl functions","text":"","category":"section"},{"location":"microbiome/","page":"Microbiome.jl Docstrings","title":"Microbiome.jl Docstrings","text":"BiobakeryUtils.jl re-exports all of the functionality from Microbiome.jl. The docstrings from that package are reproduced here, but checkout the Microbiome.jl docs for more details.","category":"page"},{"location":"microbiome/","page":"Microbiome.jl Docstrings","title":"Microbiome.jl Docstrings","text":"Modules = [Microbiome]","category":"page"},{"location":"microbiome/#Microbiome.CommunityProfile","page":"Microbiome.jl Docstrings","title":"Microbiome.CommunityProfile","text":"CommunityProfile{T, F, S} <: AbstractAbundanceTable{T, F, S}\n\nAn AbstractAssemblage from EcoBase.jl that uses an AxisArray of a SparseMatrixCSC under the hood.\n\nCommunityProfiles are tables with AbstractFeature-indexed rows and AbstractSample-indexed columns. Note - we can use the name of samples and features to index.\n\n\n\n\n\n","category":"type"},{"location":"microbiome/#Microbiome.GeneFunction","page":"Microbiome.jl Docstrings","title":"Microbiome.GeneFunction","text":"GeneFunction(name::String, taxon::Union{Taxon, String, Missing}) <: AbstractFeature\nGeneFunction(name::String)\n\nMicrobial gene function object with optional stratification (taxon).\n\n\n\n\n\n","category":"type"},{"location":"microbiome/#Microbiome.Metabolite","page":"Microbiome.jl Docstrings","title":"Microbiome.Metabolite","text":"Metabolite(name::String, commonname::Union{Missing, String}, mz::Union{Missing, Float64}, rt::Union{Missing, Float64}) <: AbstractFeature\nMetabolite(name::String)\n\nRepresents a small-molecule metabolite coming from an LCMS. The fields are\n\nname: required, this should be a unique identifier\ncommonname: might refer to a chemical name like \"proprionate\"\nmz: The mass/charge ratio\nrt: The retention time\n\n\n\n\n\n","category":"type"},{"location":"microbiome/#Microbiome.MicrobiomeSample","page":"Microbiome.jl Docstrings","title":"Microbiome.MicrobiomeSample","text":"MicrobiomeSample(name::String, metadata::Dictionary{Symbol, T}) <: AbstractSample\nMicrobiomeSample(name::String; kwargs...)\nMicrobiomeSample(name::String)\n\nMicrobiome sample type that includes a name and a Dictionary of arbitrary metadata using Symbols (other than :name or :metadata) as keys.\n\nMetadata can be accessed using getproperty or getindex on the sample itself.\n\nSamples can be instantiated with only a name, leaving the metadata Dictionary blank\n\nAdding or changing metadata follows the same rules as for the normal Dictionary.\n\n\n\n\n\n","category":"type"},{"location":"microbiome/#Microbiome.Taxon","page":"Microbiome.jl Docstrings","title":"Microbiome.Taxon","text":"Taxon(name::String, rank::Union{Missing, Symbol, Int}) <: AbstractFeature\nTaxon(name::String)\n\nMicrobial taxon with a name and a rank that can be one of \n\n:domain\n:kingom\n:phylum\n:class\n:order\n:faamily\n:genus\n:species\n:subspecies\n:strain\n\nor missing. Contructors can also use numbers 0-9, or pass a string alone (in which case the taxon will be stored as missing).\n\nSee also taxon.\n\n\n\n\n\n","category":"type"},{"location":"microbiome/#Base.delete!-Tuple{AbstractSample, Symbol}","page":"Microbiome.jl Docstrings","title":"Base.delete!","text":"delete!(as::AbstractSample, prop::Symbol)\n\nDelete a metadata entry of sample as using the Symbol prop if it exists, or throw an error otherwise. If you don't want an error to be thrown if the value does not exist, use unset!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.delete!-Tuple{CommunityProfile, AbstractString, Symbol}","page":"Microbiome.jl Docstrings","title":"Base.delete!","text":"delete!(commp::CommunityProfile, sample::AbstractString, prop::Symbol)\n\nDelete a metadata entry in sample from CommunityProfile commp using the Symbol prop if it exists, or throw an error otherwise. If you don't want an error to be thrown if the value does not exist, use unset!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.filter-Tuple{Function, CommunityProfile}","page":"Microbiome.jl Docstrings","title":"Base.filter","text":"filter(f, comm::CommunityProfile)\n\nApply f to the features of comm, and return a copy where f(feature) is true.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.get","page":"Microbiome.jl Docstrings","title":"Base.get","text":"get(commp::CommunityProfile, key::Symbol, default)\n\nReturn the value of the metadata in a sample stored for the given key, or the given default value if no mapping for the key is present.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Base.get-2","page":"Microbiome.jl Docstrings","title":"Base.get","text":"get(commp::CommunityProfile, sample::AbstractString, key::Symbol, default)\n\nReturn the value of the metadata in a sample stored for the given key, or the given default value if no mapping for the key is present.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Base.get-Tuple{AbstractSample, Symbol, Any}","page":"Microbiome.jl Docstrings","title":"Base.get","text":"get(as::AbstractSample, key::Symbol, default)\n\nReturn the value of the metadata in the sample as stored for the given key, or the given default value if no mapping for the key is present.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.getindex-Tuple{AbstractSample, Symbol}","page":"Microbiome.jl Docstrings","title":"Base.getindex","text":"getindex(as::AbstractSample, prop::Symbol)\n\nReturn the prop value in the metadata dictionary of as. This enables using bracket syntax for access, eg as[prop].\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.getproperty-Tuple{AbstractSample, Symbol}","page":"Microbiome.jl Docstrings","title":"Base.getproperty","text":"getproperty(as::AbstractSample, prop::Symbol)\n\nReturn the prop value in the metadata dictionary of as. This enables using dot syntax for access, eg as.prop.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.haskey-Tuple{AbstractSample, Symbol}","page":"Microbiome.jl Docstrings","title":"Base.haskey","text":"haskey(as::AbstractSample, key::Symbol)\n\nDetermine whether the metadata of sample as has a mapping for a given key.  Use !haskey to determine whether a sample as in a CommunityProfile doesn't have a mapping for a given key\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.haskey-Tuple{CommunityProfile, AbstractString, Symbol}","page":"Microbiome.jl Docstrings","title":"Base.haskey","text":"haskey(commp::CommunityProfile, sample::AbstractString, key::Symbol)\n\nDetermine whether the metadata of sample in a CommunityProfile commp has a mapping for a given key.  Use !haskey to determine whether a sample in a CommunityProfile doesn't have a mapping for a given key\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.insert!-Tuple{AbstractSample, Symbol, Any}","page":"Microbiome.jl Docstrings","title":"Base.insert!","text":"insert!(as::AbstractSample, prop::Symbol, val)\n\nInsert a value val to the metadata of sample as using a Symbol prop,  and it will throw an error if prop exists.  If you don't want an error to be thrown if the value exists, use set!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.insert!-Tuple{CommunityProfile, AbstractString, Symbol, Any}","page":"Microbiome.jl Docstrings","title":"Base.insert!","text":"insert!(commp::CommunityProfile, sample::AbstractString, prop::Symbol, val)\n\nInsert a value val to the metadata of sample in a CommunityProfile commp using a Symbol prop,  and it will throw an error if prop exists.  If you don't want an error to be thrown if the value exists, use set!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.insert!-Tuple{CommunityProfile, Any}","page":"Microbiome.jl Docstrings","title":"Base.insert!","text":"insert!(cp::CommunityProfile, md; namecol=:sample)\n\nAdd metadata (in the form of a Tables.jl table) a CommunityProfile. One column (namecol) should contain sample names that exist in commp, and other columns should contain metadata that will be added to the metadata of each sample.\n\nBefore starting, this will check that every value in every row is insert!able, and will throw an error if not. This requires iterating over the metadata table twice, which may be slow. If performance matters, you can use set! instead,  though this will overwrite existing data.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.keys-Tuple{AbstractSample}","page":"Microbiome.jl Docstrings","title":"Base.keys","text":"keys(as::AbstractSample)\n\nReturn an iterator over all keys of the metadata attached to sample as.  collect(keys(as)) returns an array of keys. \n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Base.keys-Tuple{CommunityProfile, AbstractString}","page":"Microbiome.jl Docstrings","title":"Base.keys","text":"keys(commp::CommunityProfile, sample::AbstractString)\n\nReturn an iterator over all keys of the metadata attached to sample in a CommunityProfile commp.  collect(keys(commp, sample)) returns an array of keys. \n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Dictionaries.set!-Tuple{AbstractSample, Symbol, Any}","page":"Microbiome.jl Docstrings","title":"Dictionaries.set!","text":"set!(as::AbstractSample, prop::Symbol, val)\n\nUpdate or insert a value val to the metadata of sample as using a Symbol prop.  If you want an error to be thrown if the value already exists, use insert!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Dictionaries.set!-Tuple{CommunityProfile, AbstractString, Symbol, Any}","page":"Microbiome.jl Docstrings","title":"Dictionaries.set!","text":"set!(commp::CommunityProfile, sample::AbstractString, prop::Symbol, val)\nset!(commp::CommunityProfile, sample::AbstractString, md::Union{AbstractDict, NamedTuple})\n\nUpdate or insert a value val to the metadata of sample in the CommunityProfile commp using a Symbol prop.  If you want an error to be thrown if the value already exists, use insert!.\n\nCan also pass a Dictionary or NamedTuple containing key=> value pairs, all of which will be set!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Dictionaries.set!-Tuple{CommunityProfile, Any}","page":"Microbiome.jl Docstrings","title":"Dictionaries.set!","text":"set!(cp::CommunityProfile, md; namecol=:sample)\n\nAdd metadata (in the form of a Tables.jl table) a CommunityProfile. One column (namecol) should contain sample names that exist in commp, and other columns should contain metadata that will be added to the metadata of each sample.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Dictionaries.unset!-Tuple{AbstractSample, Symbol}","page":"Microbiome.jl Docstrings","title":"Dictionaries.unset!","text":"unset!(as::AbstractSample, prop::Symbol)\n\nDelete a metadata entry of sample as using the Symbol prop.  If you want an error to be thrown if the value does not exist, use delete!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Dictionaries.unset!-Tuple{CommunityProfile, AbstractString, Symbol}","page":"Microbiome.jl Docstrings","title":"Dictionaries.unset!","text":"unset!(commp::CommunityProfile, sample::AbstractString, prop::Symbol)\n\nDelete a metadata entry in sample from CommunityProfile commp using the Symbol prop.  If you want an error to be thrown if the value does not exist, use delete!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.abundances","page":"Microbiome.jl Docstrings","title":"Microbiome.abundances","text":"abundances(at::AbstractAbundanceTable)\n\nGet the underlying sparse matrix of an AbstractAbundanceTable. Note that this does not copy - any modifications to this matrix will update the parent.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.braycurtis-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.braycurtis","text":"braycurtis(abt::AbstractAbundanceTable)\n\nReturns a pairwise Bray-Curtis dissimilarity matrix.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.commjoin-Tuple{CommunityProfile, Vararg{CommunityProfile}}","page":"Microbiome.jl Docstrings","title":"Microbiome.commjoin","text":"commjoin(c1::CommunityProfile, comms::CommunityProfile...)\n\nJoin multiple CommunityProfiles, creating a new CommunityProfile. For now, sample names cannot overlap in any of the input profiles.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.commonname-Tuple{Metabolite}","page":"Microbiome.jl Docstrings","title":"Microbiome.commonname","text":"commonname(m::Metabolite)\n\nAccessor function for the commonname field of a Metabolite.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.featurenames","page":"Microbiome.jl Docstrings","title":"Microbiome.featurenames","text":"featurenames(at::AbstractAbundanceTable)\n\nGet a vector of feature names from at, equivalent to name.(features(at))\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.features-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.features","text":"features(at::AbstractAbundanceTable)\n\nReturns features in at. To get featurenames instead, use featurenames.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.featuretotals-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.featuretotals","text":"featuretotals(at::AbstractAbundanceTable)\n\nReturns sum of each row (feature) in at. Note, return value is a nfeatures x 1 Matrix, not a Vector. If you need 1D Vector, use vec(featuretotals(at)).\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.genefunction-Tuple{AbstractString}","page":"Microbiome.jl Docstrings","title":"Microbiome.genefunction","text":"genefunction(n::AbstractString)\n\nMake a GeneFunction from a string, Converting anything after an initial | as a Taxon.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.ginisimpson!-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.ginisimpson!","text":"ginisimpson!(abt::AbstractAbundanceTable; overwrite=false)\n\nAdds a :ginisimpson entry to the metadata for each sample in abt with the Gini-Simpson alpha diversity of that sample (see ginisimpson). If overwrite=false (the default), uses insert! to perform this operation, so an error will be thrown if any sample already contains a :ginisimpson entry. Otherwise, uses set!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.ginisimpson-Union{Tuple{Union{AbstractVector{T}, SparseArrays.AbstractSparseMatrix{T}}}, Tuple{T}} where T<:Real","page":"Microbiome.jl Docstrings","title":"Microbiome.ginisimpson","text":"ginisimpson(v::Union{AbstractVector, AbstractSparseMatrix}) \nginisimpson(abt::AbstractAbundanceTable, overwrite=false)\n\nComputes the Gini-Simpson alpha diversity metric for a vector. When called on an AbstractAbundanceTable, returns a 1 x nsamples matrix with 1 entry per sample. See also ginisimpson!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.hasrank-Tuple{GeneFunction}","page":"Microbiome.jl Docstrings","title":"Microbiome.hasrank","text":"hasrank(gf::GeneFunction)::Bool\n\nBoolean function that returns:\n\ntrue if gf has a Taxon with a non-missing rank field,\nfalse if there's no Taxon, or \nfalse if the Taxon has no rank\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.hasrank-Tuple{Taxon}","page":"Microbiome.jl Docstrings","title":"Microbiome.hasrank","text":"hasrank(t::Taxon)::Bool\n\nBoolean function that returns true if the rank field in Taxon t is not missing, or false if it is missing\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.hastaxon-Tuple{GeneFunction}","page":"Microbiome.jl Docstrings","title":"Microbiome.hastaxon","text":"hastaxon(gf::GeneFunction)::Bool\n\nBoolean function that returns true if the taxon field in a GeneFunction gf is not missing, or false if it is missing\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.hellinger-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.hellinger","text":"hellinger(abt::AbstractAbundanceTable)\n\nReturns a pairwise Hellinger distance matrix.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.jaccard-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.jaccard","text":"jaccard(abt::AbstractAbundanceTable)\n\nReturns a pairwise Jaccard distance matrix.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.masscharge-Tuple{Metabolite}","page":"Microbiome.jl Docstrings","title":"Microbiome.masscharge","text":"masscharge(m::Metabolite)\n\nAccessor function for the mz field of a Metabolite.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.metadata-Tuple{AbstractSample}","page":"Microbiome.jl Docstrings","title":"Microbiome.metadata","text":"metadata(t::AbstractSample)\n\nGet the metadata field from an AbstractSample. Note that this is not a copy, so modifications to the returned value will update the parent AbstractSample as well.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.metadata-Tuple{CommunityProfile}","page":"Microbiome.jl Docstrings","title":"Microbiome.metadata","text":"metadata(commp::CommunityProfile)\n\nReturns iterator of NamedTuple per sample, where keys are :sample and each metadata key found in commp. Samples without given metadata are filled with missing.\n\nReturned values can be passed to any Tables.rowtable - compliant type, eg DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.name-Tuple{AbstractSample}","page":"Microbiome.jl Docstrings","title":"Microbiome.name","text":"name(t::Union{AbstractSample, AbstractFeature})\n\nGet the name field from an AbstractSample or AbstractFeature.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.pcoa","page":"Microbiome.jl Docstrings","title":"Microbiome.pcoa","text":"pcoa(abt::AbstractAbundanceTable, f=braycurtis)\n\nReturns eigenvectors from fitting MDS to a distance metric generated by f, by default braycurtis.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.present","page":"Microbiome.jl Docstrings","title":"Microbiome.present","text":"present(t::Union{Real, Missing}, minabundance::Real=0.0)\npresent(at::AbstractAbundanceTable, minabundance::Real=0.0)\n\nCheck if a given (non-zero) value is greater than or equal to a minimum value. If the minimum abundance is 0, just checks if value is non-zero.\n\nIf used on an AbstractAbundanceTable, returns a sparse boolean matrix of the same size.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.prevalence","page":"Microbiome.jl Docstrings","title":"Microbiome.prevalence","text":"prevalence(a::AbstractArray{<:Real}, minabundance::Real=0.0)\nprevalence(at::AbstractAbundanceTable, minabundance::Real=0.0)\n\nReturn the fraction of values that are greater than or equal to a minimum. If the minimum abundance is 0, returns the fraction of non-zero values.\n\nIf used on an AbstractAbundanceTable, returns a prevalence value for each feature accross the samples.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.prevalence_filter-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.prevalence_filter","text":"prevalence_filter(comm::AbstractAbundanceTable; minabundance=0.0; minprevalence=0.05, renorm=false)\n\nReturn a filtered CommunityProfile where features with prevalence lower than minprevalence are removed. By default, a feature is considered \"present\" if > 0, but this can be changed by setting minabundance.\n\nOptionally, set renorm = true to calculate relative abundances after low prevalence features are removed.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.rankfilter-Tuple{Microbiome.AbstractAbundanceTable, Symbol}","page":"Microbiome.jl Docstrings","title":"Microbiome.rankfilter","text":"rankfilter(comm::AbstractAbundanceTable, cl::Union{Symbol, Int}; keepempty=false)\n\nReturn a copy of comm, where only rows that have taxrank(feature) == cl are kept. Use keepempty = true to also keep features that don't have a rank (eg \"UNIDENTIFIED\").\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.relativeabundance","page":"Microbiome.jl Docstrings","title":"Microbiome.relativeabundance","text":"relativeabundance(at::AbstractAbundanceTable, kind::Symbol=:fraction)\n\nLike relativeabundance!, but does not mutate original.\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.relativeabundance!-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.relativeabundance!","text":"relativeabundance!(a::AbstractAbundanceTable; kind::Symbol=:fraction)\n\nNormalize each sample in AbstractAbundanceTable to the sum of the sample.\n\nBy default, columns sum to 1.0. Use kind=:percent for columns to sum to 100.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.retentiontime-Tuple{Metabolite}","page":"Microbiome.jl Docstrings","title":"Microbiome.retentiontime","text":"retentiontime(m::Metabolite)\n\nAccessor function for the rt field of a Metabolite.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.runtests-Tuple","page":"Microbiome.jl Docstrings","title":"Microbiome.runtests","text":"Microbiome.runtests(pattern...; kwargs...)\n\nEquivalent to ReTest.retest(Microbiome, pattern...; kwargs...). This function is defined automatically in any module containing a @testset, possibly nested within submodules.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.samplenames","page":"Microbiome.jl Docstrings","title":"Microbiome.samplenames","text":"samplenames(at::AbstractAbundanceTable)\n\nGet a vector of sample names from at, equivalent to name.(samples(at))\n\n\n\n\n\n","category":"function"},{"location":"microbiome/#Microbiome.samples-Tuple{Microbiome.AbstractAbundanceTable, AbstractString}","page":"Microbiome.jl Docstrings","title":"Microbiome.samples","text":"samples(at::AbstractAbundanceTable, name::AbstractString)\n\nReturns sample in at with name name.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.samples-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.samples","text":"samples(at::AbstractAbundanceTable)\n\nReturns samples in at. To get samplenames instead, use samplenames.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.sampletotals-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.sampletotals","text":"sampletotals(at::AbstractAbundanceTable)\n\nReturns sum of each row (feature) in at. Note, return value is a 1 x nsamples Matrix, not a Vector. If you need 1D Vector, use vec(sampletotals(at)).\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.shannon!-Tuple{Microbiome.AbstractAbundanceTable}","page":"Microbiome.jl Docstrings","title":"Microbiome.shannon!","text":"shannon!(abt::AbstractAbundanceTable; overwrite=false)\n\nAdds a :shannon entry to the metadata for each sample in abt with the Shannon alpha diversity of that sample (see shannon). If overwrite=false (the default), uses insert! to perform this operation, so an error will be thrown if any sample already contains a :shannon entry. Otherwise, uses set!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.shannon-Union{Tuple{Union{AbstractVector{T}, SparseArrays.AbstractSparseMatrix{T}}}, Tuple{T}} where T<:Real","page":"Microbiome.jl Docstrings","title":"Microbiome.shannon","text":"shannon(v::Union{AbstractVector, AbstractSparseMatrix}) \nshannon(abt::AbstractAbundanceTable)\n\nComputes the Shannon alpha diversity metric for a vector. When called on an AbstractAbundanceTable, returns a 1 x nsamples matrix with 1 entry per sample. See also shannon!.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.taxon-Tuple{AbstractString}","page":"Microbiome.jl Docstrings","title":"Microbiome.taxon","text":"taxon(::AbstractString)\n\nReturn a Taxon from a string representation. If the string contains taxonomic rank information in the form \"x__Thename\" where x is the first letter of the rank, this information will be used.\n\nExamples\n\njulia> taxon(\"Unknown\")\nTaxon(\"Unknown\", missing)\n\njulia> taxon(\"s__Prevotella_copri\")\nTaxon(\"Prevotella_copri\", :species)\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.taxon-Tuple{GeneFunction}","page":"Microbiome.jl Docstrings","title":"Microbiome.taxon","text":"taxon(gf::GeneFunction)\n\nGet the taxon field from a GeneFunction, gf. Returns missing if the taxon is not set.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.taxrank-Tuple{GeneFunction}","page":"Microbiome.jl Docstrings","title":"Microbiome.taxrank","text":"taxrank(gf::GeneFunction)\n\nGet the rank field from the taxon field of a GeneFunction gf if it has one. Returns missing if the taxon or rank is not set.\n\n\n\n\n\n","category":"method"},{"location":"microbiome/#Microbiome.taxrank-Tuple{Taxon}","page":"Microbiome.jl Docstrings","title":"Microbiome.taxrank","text":"taxrank(t::Union{Taxon, missing})\n\nGet the rank field from a Taxon t. Returns missing if the rank is not set.\n\n\n\n\n\n","category":"method"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"CurrentModule = BiobakeryUtils\nDocTestSetup  = quote\n    using BiobakeryUtils\n    using BiobakeryUtils.Conda\n    BiobakeryUtils.install_deps()\n    ENV[\"PATH\"] = ENV[\"PATH\"] * Conda.bind_dir(:BiobakeryUtils)\nend","category":"page"},{"location":"humann/#humann-tutorial","page":"Working with HUMAnN","title":"HUMAnN Tutorial with BiobakeryUtils.jl","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"🗒️ This tutorial is meant to be run in parallel with / mirror the official HUMAnN v3 tutorial\n❓️ If you have questions about HUMAnN itself, please direct them to the bioBakery help forum\n🤔 If you have questions about using the MetaPhlAn tools in julia, please open an issue, or start a discussion over on Microbiome.jl!\n📔 For a function / type reference, jump to the bottom","category":"page"},{"location":"humann/#Installation-and-setup","page":"Working with HUMAnN","title":"Installation and setup","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"If you haven't already, check out the \"Getting Started\" page to install julia, create an environment, and install BiobakeryUtils.jl, and hook up or install the HUMAnN v3 command line tools.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"This tutorial assumes:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You are running julia v1.6 or greater\nYou have activated a julia Project that has BiobakeryUtils.jl installed\nThe humann python package is installed, and accessible from your PATH.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"If any of those things aren't true, or you don't know if they're true, go back to \"Getting Started\" to see if you skipped a step. If you're still confused, please ask (see 3rd bullet point at the top)!","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"using BiobakeryUtils\nusing BiobakeryUtils.Conda\nBiobakeryUtils.install_deps()\nENV[\"PATH\"] = ENV[\"PATH\"] * ':' * Conda.bin_dir(:BiobakeryUtils) #hide","category":"page"},{"location":"humann/#HUMAnN-Databases","page":"Working with HUMAnN","title":"HUMAnN Databases","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"HUMAnN requires a number of specialized databases to work correctly. When you first install it, it comes with some demo databases that are much smaller, but can be used to complete this tutorial. However, for actually running real data, you'll want to take the time to download them - they're BIG! See here for more information.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For now, the easiest way to do this for now is via the shell, which you can access from the julia REPL by typing ;:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":";humann_databases --help\nusage: humann_databases [-h] [--available]\n                        [--download <database> <build> <install_location>]\n                        [--update-config {yes,no}]\n                        [--database-location DATABASE_LOCATION]\n\nHUMAnN Databases\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --available           print the available databases\n  --download <database> <build> <install_location>\n                        download the selected database to the install location\n  --update-config {yes,no}\n                        update the config file to set the new database as the default [DEFAULT: yes]\n  --database-location DATABASE_LOCATION\n                        location (local or remote) to pull the database\n\n;humann_databases --available\nHUMANnN2 Databases ( database : build = location )\nchocophlan : full = http://huttenhower.sph.harvard.edu/humann_data/chocophlan/full_chocophlan.v296_201901b.tar.gz\nchocophlan : DEMO = http://huttenhower.sph.harvard.edu/humann_data/chocophlan/DEMO_chocophlan.v296_201901b.tar.gz\nuniref : uniref50_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_annotated/uniref50_annotated_v201901b_ful\nl.tar.gz\nuniref : uniref90_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_annotated/uniref90_annotated_v201901b_ful\nl.tar.gz\nuniref : uniref50_ec_filtered_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_ec_filtered/uniref50_ec_filte\nred_201901b_subset.tar.gz\nuniref : uniref90_ec_filtered_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_ec_filtered/uniref90_ec_filte\nred_201901b_subset.tar.gz\nuniref : DEMO_diamond = http://huttenhower.sph.harvard.edu/humann_data/uniprot/uniref_annotated/uniref90_DEMO_diamond_v201901b.tar.\ngz\nutility_mapping : full = http://huttenhower.sph.harvard.edu/humann_data/full_mapping_v201901b.tar.gz","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For example, if you'd like to install these databases to /BigDrive/humann/, you could run","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"shell> humann_databases --download chocophlan full /BigDrive/humann/chocophlan\n# ... lots of output\n\nshell> humann_databases --download uniref uniref90_diamond /BigDrive/humann/uniref\n# ... lots of output\n\nshell> humann_databases --download utility_mapping full /BigDrive/humann/utility_mapping\n# ... lots of output","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"At some point, I'll write some functions to automate this, but for now, doing this will update a configuration file, so you shouldn't have to worry about it again.","category":"page"},{"location":"humann/#Running-HUMAnN","page":"Working with HUMAnN","title":"Running HUMAnN","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Some example files you can use to run this tutorial are available from the MetaPhlAn repo, and can be downloaded using the Downloads standard library in julia:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> using Downloads: download\n\njulia> base_url = \"https://github.com/biobakery/humann/raw/master/examples/\";\n\njulia> files = [\n           \"demo.fastq.gz\",\n           \"demo.sam\",\n           \"demo.m8\"\n       ];\n\njulia> for file in files\n           download(joinpath(base_url, file), file)\n       end\n\njulia> readdir()\n5-element Vector{String}:\n \"Manifest.toml\"\n \"Project.toml\"\n \"demo.fastq.gz\"\n \"demo.sam\"\n \"demo.m8\"","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For convenience, this package has the humann() function, which can be used in your julia scripts to build and call the humann command line tool.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For example, rather than call","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"$ humann --input demo.fastq.gz --output demo_fastq","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can do","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> humann(\"demo.fastq.gz\", \"demo_fastq\")\n[ Info: Running command: humann -i demo.fastq.gz -o demo_fastq\nCreating output directory: /home/kevin/my_project/demo_fastq\nOutput files will be written to: /home/kevin/my_project/demo_fastq\nDecompressing gzipped file ...\n# ... etc","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"First, humann will run metaphlan to generate taxonomic profiles, then will use that taxonomic profile to run a custom gene search.","category":"page"},{"location":"humann/#Default-outputs","page":"Working with HUMAnN","title":"Default outputs","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"To load a profile generated by humann, use the humann_profile function:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs = humann_profile(\"demo_fastq/demo_genefamilies.tsv\")\nMicrobiome.CommunityProfile{Float64, Microbiome.GeneFunction, Microbiome.MicrobiomeSample} with 589 things in 1 places\n\nSample names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_I9QXW8...UniRef90_A6LH06, UniRef90_D0TRR5\n\nFeature names:\ndemo_genefamilies","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"HUMAnN generates \"stratified\" gene function profiles -  in other words, each gene function is also split into the species that contributed it. By default, human_profile skips the stratified rows (they can get big!):","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> first(features(gfs), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UniRef90_G1UL42\", missing)\n GeneFunction(\"UniRef90_I9QXW8\", missing)\n GeneFunction(\"UniRef90_A0A174QBF2\", missing)\n GeneFunction(\"UniRef90_A0A078RDY6\", missing)","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"The missing component of the GeneFunction means that these gene functions are not associated with a particular taxon.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"If you want to hang onto the taxon information, use the keyword argument stratified = true:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_strat = humann_profile(\"demo_fastq/demo_genefamilies.tsv\", stratified=true)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 1416 features in 1 samples\n\nFeature names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_G1UL42...UniRef90_D0TRR5, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies\n\n\n\njulia> first(features(gfs_strat), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UniRef90_G1UL42\", missing)\n GeneFunction(\"UniRef90_G1UL42\", Taxon(\"Bacteroides_dorei\", :species))\n GeneFunction(\"UniRef90_I9QXW8\", missing)\n GeneFunction(\"UniRef90_I9QXW8\", Taxon(\"Bacteroides_dorei\", :species))","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Here, we can see that the uniref90 \"G1UL42\" was contributed by Bacteroides dorei.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"The object returned by humann_profile is a CommunityProfile type from Microbiome.jl, and has a bunch of useful properties.","category":"page"},{"location":"humann/#Indexing","page":"Working with HUMAnN","title":"Indexing","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For CommunityProfiles, you can select features and samples with strings (or regular expressions) representing names of features (rows) or samples (columns):","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> samplenames(gfs_strat)\n1-element Vector{String}:\n \"demo_genefamilies\"\n\njulia> featurenames(gfs_strat)\n1416-element Vector{String}:\n \"UNMAPPED\"\n \"UniRef90_G1UL42\"\n \"UniRef90_G1UL42\"\n \"UniRef90_I9QXW8\"\n ⋮\n \"UniRef90_A6LH06\"\n \"UniRef90_D0TRR5\"\n \"UniRef90_D0TRR5\"\n \"UniRef90_D0TRR5\"\n\njulia> slice = gfs_strat[\"UniRef90_A0A174NIB7\", :]\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 3\nfeatures in 1 samples\n\nFeature names:\nUniRef90_A0A174NIB7, UniRef90_A0A174NIB7, UniRef90_A0A174NIB7\n\nSample names:\ndemo_genefamilies\n\n\n\njulia> features(slice)\n3-element Vector{GeneFunction}:\n GeneFunction(\"UniRef90_A0A174NIB7\", missing)\n GeneFunction(\"UniRef90_A0A174NIB7\", Taxon(\"Bacteroides_dorei\", :species))\n GeneFunction(\"UniRef90_A0A174NIB7\", Taxon(\"Bacteroides_vulgatus\", :species))","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Using a string (or regular expression) to index will return all rows whose name matches, regardless of the taxon. If you just want a single value, you can use a GeneFunction directly:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_strat[GeneFunction(\"UniRef90_A0A174NIB7\", \"s__Bacteroides_dorei\"), 1]\n0.8271298594","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can even pass an array of strings as the row index to get a slice with multiple gene functions:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> features(gfs_strat[[\"UniRef90_A0A174NIB7\", \"UniRef90_A6L100\"], :])\n5-element Vector{GeneFunction}:\n GeneFunction(\"UniRef90_A6L100\", missing)\n GeneFunction(\"UniRef90_A6L100\", Taxon(\"Bacteroides_vulgatus\", :species))\n GeneFunction(\"UniRef90_D0TRR5\", missing)\n GeneFunction(\"UniRef90_D0TRR5\", Taxon(\"Bacteroides_vulgatus\", :species))\n GeneFunction(\"UniRef90_D0TRR5\", Taxon(\"Bacteroides_dorei\", :species))","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For more information about indexing and accessing components of the data, see the Microbiome.jl docs","category":"page"},{"location":"humann/#Manipulating-tables","page":"Working with HUMAnN","title":"Manipulating tables","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"There are several ways to manipulate CommunityProfiles, both using julia and using utilities provided by humann.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"One example of the former is using filter, which takes a boolean function as the first argument, and returns a new CommunityProfile containing only rows that returned true.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For example, given a stratified table like gfs_strat, if you want to get only rows that have a taxon associated with them, you can do:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_strat_only = filter(hastaxon, gfs_strat)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 827 features in 1 samples\n\nFeature names:\nUniRef90_G1UL42, UniRef90_I9QXW8, UniRef90_A0A174QBF2...UniRef90_D0TRR5, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Uh oh! We've now lost the \"UNMAPPED\" row, which means that we won't have the reads that couldn't be mapped to a gene function represented. No matter, we can use julia's anonymous function (also sometimes called \"lambda function\") syntax to roll our own function.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"In the following example, gf -> indicates a function that takes a single argument (in this case, our GeneFunction), then askes if it's name is \"UNMAPPED\" with name(gf) == \"UNMAPPED\", OR (|| is a short-circuiting OR operator) if it has a taxon:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_with_unmapped = filter(\n                            gf-> name(gf) == \"UNMAPPED\" || hastaxon(gf),\n                            gfs_strat)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 828 features in 1 samples\n\nFeature names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_I9QXW8...UniRef90_D0TRR5, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies","category":"page"},{"location":"humann/#Normalize-RPK-to-relative-abundance","page":"Working with HUMAnN","title":"Normalize RPK to relative abundance","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Some humann utility scripts have convenience functions in BiobakeryUtils.jl. for example, if you want to renormalize your table into relative abundance, you could use humann_renorm_table from the command line, or call humann_renorm:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_renormed = humann_renorm(gfs_strat; units=\"relab\")\nLoading table from: /tmp/jl_9WL33H\n  Treating /tmp/jl_9WL33H as stratified output, e.g. ['UniRef90_G1UL42', 'Bacteroides_dorei']\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 589 features in 1 samples\n\nFeature names:\nUNMAPPED, UniRef90_G1UL42, UniRef90_I9QXW8...UniRef90_A6LH06, UniRef90_D0TRR5\n\nSample names:\ndemo_genefamilies\n\njulia> abundances(gfs_strat[1:5, 1])\n5×1 SparseArrays.SparseMatrixCSC{Float64, Int64} with 5 stored entries:\n 17556.0\n   333.333\n   333.333\n   333.333\n   333.333\n\njulia> abundances(gfs_renormed[1:5, 1])\n5×1 SparseArrays.SparseMatrixCSC{Float64, Int64} with 5 stored entries:\n 0.665379\n 0.0126335\n 0.0126335\n 0.00758008\n 0.00631673","category":"page"},{"location":"humann/#Regrouping-genes-to-other-functional-categories","page":"Working with HUMAnN","title":"Regrouping genes to other functional categories","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Similarly, if we want to regroup our uniref90s into another gene function category like ecs or KOs, we can use humann_regroup","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs_rxn = humann_regroup(gfs_strat, inkind=\"uniref90\", outkind=\"rxn\")\nLoading table from: /tmp/jl_SA9rCQ\n  Treating /tmp/jl_SA9rCQ as stratified output, e.g. ['UniRef90_G1UL42', 'Bacteroides_dorei']\nLoading mapping file from: /home/kevin/.julia/conda/3/envs/biobakery/lib/python3.7/site-packages/humann/tools/../data/pathways/meta\ncyc_reactions_level4ec_only.uniref.bz2\nOriginal Feature Count: 589; Grouped 1+ times: 78 (13.2%); Grouped 2+ times: 20 (3.4%)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 174 features in 1 samples\n\nFeature names:\nUNMAPPED, UNGROUPED, 1.7.7.2-RXN...UDPNACETYLGLUCOSAMACYLTRANS-RXN, UROGENDECARBOX-RXN\n\nSample names:\ndemo_genefamilies\n\njulia> first(features(gfs_strat), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UniRef90_G1UL42\", missing)\n GeneFunction(\"UniRef90_G1UL42\", Taxon(\"Bacteroides_dorei\", :species))\n GeneFunction(\"UniRef90_I9QXW8\", missing)\n GeneFunction(\"UniRef90_I9QXW8\", Taxon(\"Bacteroides_dorei\", :species))\n\njulia> first(features(gfs_rxn), 5)\n5-element Vector{GeneFunction}:\n GeneFunction(\"UNMAPPED\", missing)\n GeneFunction(\"UNGROUPED\", missing)\n GeneFunction(\"1.7.7.2-RXN\", missing)\n GeneFunction(\"1.8.1.4-RXN\", missing)\n GeneFunction(\"2.4.1.135-RXN\", missing)","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Note - to get other feature types, you may have to download the requisite databases using humann_databases at the command line. See Using Conda.jl","category":"page"},{"location":"humann/#Attaching-names-to-features","page":"Working with HUMAnN","title":"Attaching names to features","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can attach names to features using humann_rename.","category":"page"},{"location":"humann/#HUMAnN-for-multiple-samples","page":"Working with HUMAnN","title":"HUMAnN for multiple samples","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"You can easily run multiple files in a loop in julia. First, download the files (if you already did this in the MetaPhlAn tutorial, no need to repeat it).","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> base_url = \"https://github.com/biobakery/biobakery/raw/master/demos/biobakery_demos/data/metaphlan3/input/\";\n\njulia> files = [\n           \"SRS014476-Supragingival_plaque.fasta.gz\",\n           \"SRS014494-Posterior_fornix.fasta.gz\",\n           \"SRS014459-Stool.fasta.gz\",\n           \"SRS014464-Anterior_nares.fasta.gz\",\n           \"SRS014470-Tongue_dorsum.fasta.gz\",\n           \"SRS014472-Buccal_mucosa.fasta.gz\"\n       ];\n\njulia> for file in files\n           download(joinpath(base_url, file), file)\n       end","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Then, just write a normal loop with humann:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> for file in files\n           humann(file, \"hmp_subset\")\n       end\n[ Info: Running command: humann -i SRS014476-Supragingival_plaque.fasta.gz -o hmp_subset\nCreating output directory: /home/kevin/my_project/hmp_subset\nOutput files will be written to: /home/kevin/my_project/hmp_subset\nDecompressing gzipped file ...\n# ... etc","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"On my decently powerful laptop, this took about 10 min.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"To merge them using humann_join_tables, use the convenient julia function, humann_join:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> humann_join(\"hmp_subset\", \"hmp_subset_genefamilies.tsv\"; file_name=\"genefamilies\")\nGene table created: /home/kevin/my_project/hmp_subset_genefamilies.tsv\nProcess(`humann_join_tables -i hmp_subset -o hmp_subset_genefamilies.tsv --file_name genefamilies`, ProcessExited(0))","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"This will write a new file that you can then load with humann_profiles","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> humann_profiles(\"hmp_subset_genefamilies.tsv\"; stratified=true)\n","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Alternatively, you can load each profile into a CommunityProfile, then merge them using the Microbiome.jl function commjoin:","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"# anonymous function passed to filter files that contain \"genefamilies\"\njulia> hmp_files = filter(f-> contains(f, \"genefamilies\"),\n                              readdir(\"hmp_subset\"; join=true))\n6-element Vector{String}:\n \"hmp_subset/SRS014459-Stool_genefamilies.tsv\"\n \"hmp_subset/SRS014464-Anterior_nares_genefamilies.tsv\"\n \"hmp_subset/SRS014470-Tongue_dorsum_genefamilies.tsv\"\n \"hmp_subset/SRS014472-Buccal_mucosa_genefamilies.tsv\"\n \"hmp_subset/SRS014476-Supragingival_plaque_genefamilies.tsv\"\n \"hmp_subset/SRS014494-Posterior_fornix_genefamilies.tsv\"\n\njulia> commjoin(humann_profile.(hmp_files)...)\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 1 features in 6 samples\n\nFeature names:\nUNMAPPED\n\nSample names:\nSRS014459-Stool_genefamilies, SRS014464-Anterior_nares_genefamilies, SRS014470-Tongue_dorsum_genefamilies...SRS014476-Supragingival\n_plaque_genefamilies, SRS014494-Posterior_fornix_genefamilies","category":"page"},{"location":"humann/#Plotting","page":"Working with HUMAnN","title":"Plotting","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Official tutorial link","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"BiobakeryUtils.jl does not come with plotting recipes (yet), but there are several excellent plotting packages that you can use. Alternatively, you can use the wrapped humann_barplot script.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"First, download the pcl file used in the HUMAnN tutorial.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> download(\"https://raw.githubusercontent.com/biobakery/biobakery/master/demos/biobakery_demos/data/humann2/input/hmp_pathabund.pcl\", \"hmp_pathabund.pcl\")","category":"page"},{"location":"humann/#Using-humann_barplot","page":"Working with HUMAnN","title":"Using humann_barplot","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"It's probably a good idea to read the tutorial link above that describes the dataset. here are the equivalent julia commands to generate the plots described there.","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs = read_pcl(\"hmp_pathabund.pcl\"; last_metadata=\"STSite\")\n\n\n\njulia> humann_barplot(gfs, \"plot1.png\"; focal_metadata=\"STSite\", focal_feature=\"METSYN-PWY\")\nProcess(`humann_barplot --i /tmp/jl_tKWIfW -o plot1.png --last-metadata STSite --focal-metadata STSite --focal-feature METSYN-PWY`,\n\njulia> humann_barplot(gfs, \"plot2.png\"; focal_metadata=\"STSite\", focal_feature=\"METSYN-PWY\", \n                      sort=\"sum\")\nProcess(`humann_barplot --i /tmp/jl_vF6GHe -o plot2.png --last-metadata STSite --focal-metadata STSite --focal-feature METSYN-PWY -\n\njulia> humann_barplot(gfs, \"plot3.png\"; focal_metadata=\"STSite\", focal_feature=\"METSYN-PWY\",\n                      sort=[\"sum\", \"metadata\"],\n                      scaling=\"logstack\")\nProcess(`humann_barplot --i /tmp/jl_VVl3zD -o plot3.png --last-metadata STSite --focal-metadata STSite --focal-feature METSYN-PWY -\n-sort sum metadata --scaling logstack`, ProcessExited(0))\n\njulia> humann_barplot(gfs, \"plot4.png\"; focal_metadata=\"STSite\", focal_feature=\"COA-PWY\",\n                      sort=\"sum\")\nProcess(`humann_barplot --i /tmp/jl_XePIBD -o plot4.png --last-metadata STSite --focal-metadata STSite --focal-feature COA-PWY --so\nrt sum`, ProcessExited(0))\n\njulia> humann_barplot(gfs, \"plot5.png\"; focal_metadata=\"STSite\", focal_feature=\"COA-PWY\",\n                      sort=\"braycurtis\",\n                      scaling=\"logstack\",\n                      as_genera=true,\n                      remove_zeros=true)","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"On the last call, notice that \"flag arguments\" (eg --as-genera) that don't take arguments on the command line must be set to true in the julia version.","category":"page"},{"location":"humann/#Using-julia-plotting","page":"Working with HUMAnN","title":"Using julia plotting","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Use the read_pcl function to load the pcl file into julia, which will add all of the metadata encoded in the PCL to the resulting CommunityProfile","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"julia> gfs = read_pcl(\"hmp_pathabund.pcl\", last_metadata=\"STSite\")\nCommunityProfile{Float64, GeneFunction, MicrobiomeSample} with 5606 features in 378 samples\n\nFeature names:\n1CMET2-PWY: N10-formyl-tetrahydrofolate biosynthesis, 1CMET2-PWY: N10-formyl-tetrahydrofolate biosynthesis, 1CMET2-PWY: N10-formyl-\ntetrahydrofolate biosynthesis...VALSYN-PWY: L-valine biosynthesis, VALSYN-PWY: L-valine biosynthesis\n\nSample names:\nSRS011084, SRS011086, SRS011090...SRS058213, SRS058808\n\n\n\njulia> first(samples(gfs))\nMicrobiomeSample(\"SRS011084\", {:STSite = \"Stool\"})","category":"page"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"For plotting, I tend to use Makie, but there are many other options.","category":"page"},{"location":"humann/#Functions-and-types","page":"Working with HUMAnN","title":"Functions and types","text":"","category":"section"},{"location":"humann/","page":"Working with HUMAnN","title":"Working with HUMAnN","text":"Modules = [BiobakeryUtils]\nPages = [\"humann.jl\"]","category":"page"},{"location":"humann/#BiobakeryUtils.humann-Tuple{Any, Any}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann","text":"humann(inputfile, output[, flags]; kwargs...)\n\nRun humann command line tool on inputfile, putting outputs in output. Requires humann to be installed and accessible in the PATH (see Getting Started).\n\nhumann flag options (those that don't have a parameter) can be passed in an array, and other options can be passed with keyword arguments. For example, if on the command line you would run:\n\n$ humann -i $INPUTFILE -o $OUTPUT --bypass-tranlated-search --input-format fastq.gz --output-format biom\n\nusing this function, you would write:\n\nhumann(INTPUTFILE, OUTPUT, [\"bypass_translated_search\"]; input_formal=\"fastq.gz\", output_format=\"biom\")\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_barplot-Tuple{CommunityProfile, Any}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_barplot","text":"humann_barplot(comm::CommunityProfile, outpath; kwargs...)\n\nWrapper for humann_barplot script, to generate plots from functional data. pass keyword arguments for script options. Flag arguments should be set to true. eg\n\njulia> humann_barplot(comm, \"plot.png\"; focal_metadata=\"STSite\", focal_feature=\"COA-PWY\",\n                      sort=\"braycurtis\",\n                      scaling=\"logstack\",\n                      as_genera=true,\n                      remove_zeros=true)\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_join-Tuple{Any, Any}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_join","text":"humann_renorm(comm::AbstractDataFrame; units::String=\"cpm\")\n\nWrapper for humann_renorm_table script, to renormalize from RPKM (reads per kilobase per million) to \"cpm\" (counts per million) or \"relab\" (relative abundance).\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_profile-Tuple{AbstractString}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_profile","text":"humann_profile(path::AbstractString; sample=basename(first(splitext(path))), stratified=false)\n\nLoad a single functional profile generated by HUMAnN. By default, skips rows that have species-stratified content, use stratified=true to keep them.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_profiles-Tuple{AbstractString}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_profiles","text":"\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_regroup-Tuple{CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_regroup","text":"function humann_regroup(comm::CommunityProfile; inkind=\"uniref90\", outkind::String=\"ec\")\n\nWrapper for humann_regroup_table script to convert table from one kind of functional mapping to another.\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_rename-Tuple{CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_rename","text":"humann_rename(comm::AbstractDataFrame; kind::String=\"ec\")\n\nWrapper for humann_rename_table script, returning a CommunityProfile with re-named features.\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.humann_renorm-Tuple{CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.humann_renorm","text":"humann_renorm(comm::AbstractDataFrame; units::String=\"cpm\")\n\nWrapper for humann_renorm_table script, to renormalize from RPKM (reads per kilobase per million) to \"cpm\" (counts per million) or \"relab\" (relative abundance).\n\nRequires installation of humann available in ENV[\"PATH\"]. See \"Using Conda\" for more information.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.read_pcl-Tuple{Any}","page":"Working with HUMAnN","title":"BiobakeryUtils.read_pcl","text":"read_pcl(infile; last_metadata=2)\n\nReads a PCL file and generates a CommunityProfile with metadata attached to the samples.\n\nlast_metadata may be a row number or a string representing the final metadatum.\n\n\n\n\n\n","category":"method"},{"location":"humann/#BiobakeryUtils.write_pcl-Tuple{Any, CommunityProfile}","page":"Working with HUMAnN","title":"BiobakeryUtils.write_pcl","text":"write_pcl(infile; usemetadata=:all)\n\nWrites a PCL file from a CommunityProfile with metadata attached to the samples.\n\nusemetadata may be :all  or a vector of symbols.\n\n\n\n\n\n","category":"method"},{"location":"#BiobakeryUtils","page":"BiobakeryUtils","title":"BiobakeryUtils","text":"","category":"section"},{"location":"#Contents","page":"BiobakeryUtils","title":"Contents","text":"","category":"section"},{"location":"","page":"BiobakeryUtils","title":"BiobakeryUtils","text":"Pages = [\"gettingstarted.md\", \"general.md\", \"metaphlan.md\", \"humann.md\"]\nDepth = 2","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"CurrentModule = BiobakeryUtils\nDocTestSetup  = quote\n    using BiobakeryUtils\n    using BiobakeryUtils.Conda\n    BiobakeryUtils.install_deps()\n    ENV[\"PATH\"] = ENV[\"PATH\"] * Conda.bind_dir(:BiobakeryUtils)\nend","category":"page"},{"location":"metaphlan/#metaphlan-tutorial","page":"Working with MetaPhlAn","title":"MetaPhlAn Tutorial with BiobakeryUtils.jl","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"🗒️ This tutorial is meant to be run in parallel with / mirror the official MetaPhlAn v3 tutorial\n❓️ If you have questions about MetaPhlAn itself, please direct them to the bioBakery help forum\n🤔 If you have questions about using the MetaPhlAn tools in julia, please open an issue, or start a discussion over on Microbiome.jl!\n📔 For a function / type reference, jump to the bottom","category":"page"},{"location":"metaphlan/#Installation-and-setup","page":"Working with MetaPhlAn","title":"Installation and setup","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"If you haven't already, check out the \"Getting Started\" page to install julia, create an environment,xd and install BiobakeryUtils.jl, and hook up or install the MetaPhlAn v3 command line tools.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"This tutorial assumes:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"You are running julia v1.6 or greater\nYou have activated a julia Project that has BiobakeryUtils.jl installed\nThe metaphlan python package is installed, and accessible from your PATH.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"If any of those things aren't true, or you don't know if they're true, go back to \"Getting Started\" to see if you skipped a step. If you're still confused, please ask (see 3rd bullet point at the top)!","category":"page"},{"location":"metaphlan/#Bowtie2-database","page":"Working with MetaPhlAn","title":"Bowtie2 database","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"The first time you run metaphlan, it needs to download and unpack the marker database. If you don't care where this goes, don't worry about it - by default it will go into a subdirectory of your conda environment.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"If your home folder has limited space, or you want to install it to a particular location (eg a faster drive), you can either pass the kewword argument bowtie2db=\"/path/to/location\" to all metaphlan commands, or set the environment variable METAPHLAN_BOWTIE2_DB.","category":"page"},{"location":"metaphlan/#Input-files","page":"Working with MetaPhlAn","title":"Input files","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Some example files you can use to run this tutorial are available from the MetaPhlAn repo, and can be downloaded using the Downloads standard library in julia:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> using Downloads: download\n\njulia> base_url = \"https://github.com/biobakery/biobakery/raw/master/demos/biobakery_demos/data/metaphlan3/input/\";\n\njulia>  files = [\n    \"SRS014476-Supragingival_plaque.fasta.gz\",\n    \"SRS014494-Posterior_fornix.fasta.gz\",\n    \"SRS014459-Stool.fasta.gz\",\n    \"SRS014464-Anterior_nares.fasta.gz\",\n    \"SRS014470-Tongue_dorsum.fasta.gz\",\n    \"SRS014472-Buccal_mucosa.fasta.gz\"\n];\n\njulia> for file in files\n           download(joinpath(base_url, file), file)\n       end\n\njulia> readdir()\n9-element Vector{String}:\n \"Manifest.toml\"\n \"Project.toml\"\n \"SRS014459-Stool.fasta.gz\"\n \"SRS014464-Anterior_nares.fasta.gz\"\n \"SRS014470-Tongue_dorsum.fasta.gz\"\n \"SRS014472-Buccal_mucosa.fasta.gz\"\n \"SRS014476-Supragingival_plaque.fasta.gz\"\n \"SRS014494-Posterior_fornix.fasta.gz\"","category":"page"},{"location":"metaphlan/#Run-a-single-sample","page":"Working with MetaPhlAn","title":"Run a single sample","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"For convenience, this package has the metaphlan() function, which can be used in your julia scripts to build and call the metaphlan command line tool.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"For example, rather than call this from the shell:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"$ metaphlan SRS014476-Supragingival_plaque.fasta.gz --input_type fasta > SRS014476-Supragingival_plaque_profile.txt","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"you can instead call this from the julia REPL:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> metaphlan(\"SRS014476-Supragingival_plaque.fasta.gz\",\n                 \"SRS014476-Supragingival_plaque_profile.tsv\"; input_type=\"fasta\")","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"The first time you run this command, metaphlan will download its database and build Bowtie2 indices for aligning marker genes. It may take a while... maybe go for a walk 🙂.","category":"page"},{"location":"metaphlan/#Output-files","page":"Working with MetaPhlAn","title":"Output files","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"You can now load this profile using metaphlan_profile:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> mp = metaphlan_profile(\"SRS014476-Supragingival_plaque_profile.tsv\"; sample=\"SRS014476\")\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 11 features in 1 samples\n\nFeature names:\nBacteria, Actinobacteria, Actinobacteria...Corynebacterium_matruchotii, Rothia_dentocariosa\n\nSample names:\nSRS014476","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"This generates a CommunityProfile type from Microbiome.jl, which is a matrix-like object with MicrobiomeSamples as column headers, and Taxons as row headers.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"The samples can be accessed with samples or samplenames:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> samples(mp)\n1-element Vector{MicrobiomeSample}:\n MicrobiomeSample(\"SRS014476\", {})\n\njulia> samplenames(mp)\n1-element Vector{String}:\n \"SRS014476\"","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Notice that in addition to the sample name (\"SRS014476\"), there's an additional field - that's a metadata dictionary that we can add values to.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> plaque = first(samples(mp))\nMicrobiomeSample(\"SRS014476\", {})\n\njulia> set!(plaque, :STSite, \"Supragingival Plaque\")\nMicrobiomeSample(\"SRS014476\", {:STSite = \"Supragingival Plaque\"})","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"The taxa (Microbiome.jl uses the generic term \"features\") can be accessed with features or featurenames:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> features(mp)\n11-element Vector{Taxon}:\n Taxon(\"Bacteria\", :kingdom)\n Taxon(\"Actinobacteria\", :phylum)\n Taxon(\"Actinobacteria\", :class)\n Taxon(\"Corynebacteriales\", :order)\n Taxon(\"Micrococcales\", :order)\n Taxon(\"Corynebacteriaceae\", :family)\n Taxon(\"Micrococcaceae\", :family)\n Taxon(\"Corynebacterium\", :genus)\n Taxon(\"Rothia\", :genus)\n Taxon(\"Corynebacterium_matruchotii\", :species)\n Taxon(\"Rothia_dentocariosa\", :species)\n\njulia> featurenames(mp)\n11-element Vector{String}:\n \"Bacteria\"\n \"Actinobacteria\"\n \"Actinobacteria\"\n \"Corynebacteriales\"\n \"Micrococcales\"\n \"Corynebacteriaceae\"\n \"Micrococcaceae\"\n \"Corynebacterium\"\n \"Rothia\"\n \"Corynebacterium_matruchotii\"\n \"Rothia_dentocariosa\"","category":"page"},{"location":"metaphlan/#Run-on-multiple-cores","page":"Working with MetaPhlAn","title":"Run on multiple cores","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Other keywords can be passed to metaphlan() as well. For example, to speed things up a bit, try nproc=4:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> metaphlan(\"SRS014459-Stool.fasta.gz\",\n                        \"SRS014459-Stool_profile.tsv\"; input_type=\"fasta\", nproc=4)\n[ Info: Running command: metaphlan SRS014459-Stool.fasta.gz SRS014459-Stool_profile.tsv --input_type fasta --nproc 4\n# ... ","category":"page"},{"location":"metaphlan/#metaphlan-multi","page":"Working with MetaPhlAn","title":"Run multiple samples","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"You can use julia to run metaphlan in a loop to do the rest of the files. Here, we find the output path by replacing .fasta.gz with _profile.tsv, then check if it exists already, and continue if it does (&& means \"AND\" - if isfile(prof) is true, then it will do the thing on the right).","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> for f in files\n           prof = replace(f, \".fasta.gz\"=>\"_profile.tsv\")\n           isfile(prof) && continue\n           metaphlan(f, prof; input_type=\"fasta\", nproc=4)\n       end\n┌ Info: Running command: metaphlan SRS014494-Posterior_fornix.fasta.gz SRS014494-Posterior_fornix_profile.tsv --input_type fasta\n└ --nproc 4","category":"page"},{"location":"metaphlan/#Merge-outputs","page":"Working with MetaPhlAn","title":"Merge outputs","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"There are several ways to merge these profiles into one large table. One way is to use merge_metaphlan_tables.py, which has a convenient wrapper, metaphlan_merge:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> profiles = filter(f-> contains(f, \"profile\"), readdir())\n6-element Vector{String}:\n \"SRS014459-Stool_profile.tsv\"\n \"SRS014464-Anterior_nares_profile.tsv\"\n \"SRS014470-Tongue_dorsum_profile.tsv\"\n \"SRS014472-Buccal_mucosa_profile.tsv\"\n \"SRS014476-Supragingival_plaque_profile.tsv\"\n \"SRS014494-Posterior_fornix_profile.tsv\"\n\njulia> metaphlan_merge(profiles, \"merged_abundance_table.tsv\")\nProcess(`merge_metaphlan_tables.py -o merged_abundance_table.tsv SRS014459-Stool_profile.tsv SRS014464-Anterior_nares_profile.tsv S\nRS014470-Tongue_dorsum_profile.tsv SRS014472-Buccal_mucosa_profile.tsv SRS014476-Supragingival_plaque_profile.tsv SRS014494-Posteri\nor_fornix_profile.tsv`, ProcessExited(0))","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Then, you can load it as a CommunityProfile using metaphlan_profiles():","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> mps = metaphlan_profiles(\"merged_abundance_table.tsv\"; samplestart=3)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 62 features in 6 samples\n\nFeature names:\nBacteria, Actinobacteria, Actinobacteria...Moraxella, Moraxella_nonliquefaciens\n\nSample names:\nSRS014494-Posterior_fornix, SRS014476-Supragingival_plaque, SRS014472-Buccal_mucosa...SRS014464-Anterior_nares, SRS014459-Stool","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Note, the samplestart=3 argument is necessary because the second column file generated by merge_metaphlan_tables.py contains NCBI taxonomy IDs.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"An alternative is to load each individual sample as a CommunityProfile, and then merge them with commjoin:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> mps2 = commjoin([metaphlan_profile(p) for p in profiles]...)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 62 features in 6 samples\n\nFeature names:\nBacteria, Firmicutes, Bacteroidetes...Lactobacillus_crispatus, Lactobacillus_iners\n\nSample names:\nSRS014459-Stool_profile, SRS014464-Anterior_nares_profile, SRS014470-Tongue_dorsum_profile...SRS014476-Supragingival_plaque_profile\n, SRS014494-Posterior_fornix_profile","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"If you'd like that saved to disk, you can use CSV.jl:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> using CSV\n\njulia> CSV.write(\"merged_abundance_table2.tsv\", mps2)\n\"merged_abundance_table2.tsv\"","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"One benefit of doing it the later way is that as we're loading the tables, we can attach some metadata to them. For example:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> my_profiles = [] # an empty vector\nAny[]\n\njulia> for p in profiles\n           file_wo_ext = first(splitext(p))\n           (srs, site) = split(file_wo_ext, '-')\n           site = replace(site, \"_profile\"=> \"\")\n\n           sample = MicrobiomeSample(srs)\n           set!(sample, :STSite, site)\n           set!(sample, :filename, p)\n           push!(my_profiles, metaphlan_profile(p; sample))\n       end\n\njulia> mps3 = commjoin(my_profiles...)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 62 features in 6 samples\n\nFeature names:\nBacteria, Firmicutes, Bacteroidetes...Lactobacillus_crispatus, Lactobacillus_iners\n\nSample names:\nSRS014459, SRS014464, SRS014470...SRS014476, SRS014494\n\n\n\njulia> metadata(mps3)\n6-element Vector{NamedTuple{(:sample, :STSite, :filename), Tuple{String, String, String}}}:\n (sample = \"SRS014459\", STSite = \"Stool\", filename = \"SRS014459-Stool_profile.tsv\")\n (sample = \"SRS014464\", STSite = \"Anterior_nares\", filename = \"SRS014464-Anterior_nares_profile.tsv\")\n (sample = \"SRS014470\", STSite = \"Tongue_dorsum\", filename = \"SRS014470-Tongue_dorsum_profile.tsv\")\n (sample = \"SRS014472\", STSite = \"Buccal_mucosa\", filename = \"SRS014472-Buccal_mucosa_profile.tsv\")\n (sample = \"SRS014476\", STSite = \"Supragingival_plaque\", filename = \"SRS014476-Supragingival_plaque_profile.tsv\")\n (sample = \"SRS014494\", STSite = \"Posterior_fornix\", filename = \"SRS014494-Posterior_fornix_profile.tsv\")","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"See Microbiome.jl docs for more info on metadata and CommunityProfiles)","category":"page"},{"location":"metaphlan/#Analyze-Results","page":"Working with MetaPhlAn","title":"Analyze Results","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Official tutorial link","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"With the profile loaded, you can use many julia packages to analyze or visualize the results. Inside the CommunityProfile is a sparce matrix, which you can access with abundances. This means that all of julia's powerful statistics and ML libraries are easy to use with your microbiome data. ","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"For more information about indexing and accessing components of the data, see the Microbiome.jl docs","category":"page"},{"location":"metaphlan/#Performing-PCoA-analysis","page":"Working with MetaPhlAn","title":"Performing PCoA analysis","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"To demonstrate this, we'll use a couple of other julia packages to perform and plot a principal coordinates analysis (PCoA): Distances.jl and MulitvariateStats.jl.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"(Actually some convenent functions for this are re-exported from Microbiome.jl eg braycurtis and pcoa  – this is just meant to show how easy it is to use the underlying data for whatever you like)","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"You can install these by opening the Pkg REPL (type ']') and using add:","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"(my_project) pkg> add MultivariateStats Distances\n   Resolving package versions...\n    Updating `~/my_project/Project.toml`\n  [b4f34e82] + Distances v0.10.4\n  [6f286f6a] + MultivariateStats v0.8.0\n  No Changes to `~/my_project/Manifest.toml`\n\njulia> # type <backspace> to get back to normal REPL\n\njulia> using MultivariateStats\n\njulia> using Distances","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Since abundances gives us a normal matrix, we can easily use all the power of other julia packages to do analysis. Here, we'll create a distance matrix use Bray-Curtis dissimilarity, and then do multi dimensional scaling to get our PCoA ordination[note].","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> dm = pairwise(BrayCurtis(), abundances(mps3), dims=2) # parwise distances of columns (dimension 2)\n6×6 Matrix{Float64}:\n 0.0       0.853268  0.662373  0.758712  0.857143  0.758712\n 0.853268  0.0       0.845517  0.841645  0.857143  0.845517\n 0.662373  0.845517  0.0       0.77874   0.857143  0.787196\n 0.758712  0.841645  0.77874   0.0       0.857143  0.461648\n 0.857143  0.857143  0.857143  0.857143  0.0       0.857143\n 0.758712  0.845517  0.787196  0.461648  0.857143  0.0\n\njulia> pc = fit(MDS, dm, distances=true)\nClassical MDS(indim = NaN, outdim = 5)","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"For plotting, I use Makie, but there are many other options.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"(my_project) pkg> add CairoMakie\n# ...\n\njulia> using CairoMakie\n\njulia> sites = [m.STSite for m in metadata(mps3)]\n6-element Vector{String}:\n \"Stool\"\n \"Anterior_nares\"\n \"Tongue_dorsum\"\n \"Buccal_mucosa\"\n \"Supragingival_plaque\"\n \"Posterior_fornix\"\n\njulia> clrs = [:lightgreen, :cyan, :dodgerblue, :orange, :salmon, :purple]\n6-element Vector{Symbol}:\n :lightgreen\n :cyan\n :dodgerblue\n :orange\n :salmon\n :purple\n\njulia> loads = sqrt.(pc.λ)' .* projection(pc) # loadings for pcoa, columns are axes\n\njulia> fig, ax, plt = scatter(loads[:,1], loads[:, 2], color=clrs,\n                              axis=(\n                                  xlabel=\"PCoA.1\",\n                                  ylabel=\"PCoA.2\",\n                                  title=\"Demo PCoA\"\n                              ))\n\njulia> leg = Legend(fig[1,2], [MarkerElement(color = c, marker=:circle) for c in clrs], sites)\nLegend()\n\njulia> fig","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"(Image: Metaphlan PCoA)","category":"page"},{"location":"metaphlan/#Stacked-bar","page":"Working with MetaPhlAn","title":"Stacked bar","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"One more example - let's plot the proportion of different phyla in each sample. First, we'll filter the table to keep only rows that contain phyla. The filter acts on a CommunityProfile by applying the predicate to the features of the profile.","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> phyl = filter(t-> taxrank(t) == :phylum, mps3)\nCommunityProfile{Float64, Taxon, MicrobiomeSample} with 4 features in 6 samples\n\nFeature names:\nFirmicutes, Bacteroidetes, Proteobacteria, Actinobacteria\n\nSample names:\nSRS014459, SRS014464, SRS014470...SRS014476, SRS014494","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"julia> phylumnames = featurenames(phyl)\n4-element Vector{String}:\n \"Firmicutes\"\n \"Bacteroidetes\"\n \"Proteobacteria\"\n \"Actinobacteria\"\n\njulia> fig2 = Figure()\n\njulia> ax2 = Axis(fig2[1,1], title=\"Phyla in samples\", xticks=(1:nsamples(phyl), sites));\n\njulia> ax2.xticklabelrotation = π / 4 # rotations are in radians, type 'π' by doing `\\pi<tab>`\n0.7853981633974483\n\njulia> y = Float64[]\nFloat64[]\n\njulia> for sample in samples(phyl)\n           abs = abundances(phyl[:, sample])\n           abs = abs ./ sum(abs)\n           append!(y, abs)\n       end\n\njulia> x = repeat(1:nsamples(phyl), inner=nfeatures(phyl))\n24-element Vector{Int64}:\n 1\n 1\n 1\n 1\n 2\n 2\n ⋮\n 5\n 5\n 6\n 6\n 6\n 6\n\njulia> sitenums = repeat(1:nfeatures(phyl), outer=nsamples(phyl))\n24-element Vector{Int64}:\n 1\n 2\n 3\n 4\n 1\n 2\n ⋮\n 3\n 4\n 1\n 2\n 3\n 4\n\njulia> barplot!(ax2, x, y, stack=sitenums,\n               color=sitenums, colormap=:Accent_5)\nCombined{Makie.barplot, Tuple{Vector{Point{2, Float32}}}}\n\njulia> leg = Legend(fig2[1,2], [MarkerElement(color = c, marker=:rect) for c in to_colormap(:Accent_5, 4)], phylumnames)\nLegend()\n\njulia> fig2","category":"page"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"(Image: Metaphlan PCoA)","category":"page"},{"location":"metaphlan/#Functions-and-Types","page":"Working with MetaPhlAn","title":"Functions and Types","text":"","category":"section"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"Modules = [BiobakeryUtils]\nPages = [\"metaphlan.jl\"]","category":"page"},{"location":"metaphlan/#BiobakeryUtils.metaphlan-Tuple{Any, Any}","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan","text":"metaphlan(inputfile, outputfile; kwargs...)\n\nRun metaphlan command line tool on inputfile, creating outputfile. Requires metaphlan to be installed and accessible in the PATH (see Getting Started).\n\nmetaphlan options can be passed via keyword arguments. For example, if on the command line you would run:\n\n$ metaphlan some.fastq.gz output/some_profile.tsv --input_type fastq --nproc 8\n\nusing this function, you would write:\n\nmetaphlan(\"some.fastq.gz\", \"output/some_profile.tsv\"; input_type=\"fastq\", nproc=8)\n\nNote: the input_type keyword is required.\n\nSet the environmental variable \"METAPHLAN_BOWTIE2_DB\"to specify the location where the markergene database is/will be installed, or passbowtie2db = \"some/path\"` as a keyword argument.\n\n\n\n\n\n","category":"method"},{"location":"metaphlan/#BiobakeryUtils.metaphlan_merge-Tuple{Any, Any}","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan_merge","text":"metaphlan_merge(paths, outputfile; kwargs...)\n\nRun merge_metaphlan_tables command line tool on the files in paths, creating outputfile. Requires metaphlan to be installed and accessible in the PATH (see Getting Started).\n\n\n\n\n\n","category":"method"},{"location":"metaphlan/#BiobakeryUtils.metaphlan_profile","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan_profile","text":"metaphlan_profile(path::AbstractString, rank::Union{Int, Symbol}=:all; sample::AbstractString=basename(first(splitext(path))))\n\nCompiles a MetaPhlAn file into a CommunityProfile. Can select data according to taxonomic rank. If rank not given, all data is compiled. Sample name of the CommunityProfile can be specified by passing a sample argument. If name not given, the name of the file becomes the Sample name.\n\nLevels may be given either as numbers or symbols:\n\n1 = :kingdom\n2 = :phylum\n3 = :class\n4 = :order\n5 = :family\n6 = :genus\n7 = :species\n8 = :subspecies\n\n\n\n\n\n","category":"function"},{"location":"metaphlan/#BiobakeryUtils.metaphlan_profiles","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan_profiles","text":"metaphlan_profiles(path::AbstractString, rank::Union{Int, Symbol}=:all; keepunidentified=false)\n\nCompiles MetaPhlAn profiles from a merged table into a CommunityProfile. Can select data according to taxonomic rank. If rank not given, all data is compiled. Set keepunidentified flag to true to keep UNIDENTIFIED data.\n\nLevels may be given either as numbers or symbols:\n\n1 = :kingdom\n2 = :phylum\n3 = :class\n4 = :order\n5 = :family\n6 = :genus\n7 = :species\n8 = :subspecies\n\n\n\n\n\n","category":"function"},{"location":"metaphlan/#BiobakeryUtils.metaphlan_profiles-2","page":"Working with MetaPhlAn","title":"BiobakeryUtils.metaphlan_profiles","text":"metaphlan_profiles(paths::Array{<:AbstractString, 1}, rank::Union{Int, Symbol}=:all)\n\nCompiles MetaPhlAn profiles from multiple single tables into a CommunityProfile.\n\n\n\n\n\n","category":"function"},{"location":"metaphlan/#BiobakeryUtils.parsetaxa-Tuple{AbstractString}","page":"Working with MetaPhlAn","title":"BiobakeryUtils.parsetaxa","text":"parsetaxa(taxstring::AbstractString; throw_error=true)\n\nGiven a string representing taxonmic ranks as formatted by MetaPhlAn (eg \"kBacteria|pProteobacteria...\"), separates taxonomic ranks into elements of type Taxon in a vector.\n\n\n\n\n\n","category":"method"},{"location":"metaphlan/#BiobakeryUtils.parsetaxon-Tuple{AbstractString}","page":"Working with MetaPhlAn","title":"BiobakeryUtils.parsetaxon","text":"parsetaxon(taxstring::AbstractString, rank::Union{Int, Symbol})\n\nFinds given taxonomic rank in a string (as formatted by MetaPhlAn (eg \"kBacteria|pProteobacteria...\")) and returns the name and taxonomic rank as a Taxon. If taxon rank not given, function will return the most specific (lowest) taxonomic rank available.\n\nLevels may be given either as numbers or symbols:\n\n1 = :kingdom\n2 = :phylum\n3 = :class\n4 = :order\n5 = :family\n6 = :genus\n7 = :species\n8 = :subspecies\n\n\n\n\n\n","category":"method"},{"location":"metaphlan/","page":"Working with MetaPhlAn","title":"Working with MetaPhlAn","text":"[note]: Right now, the table contains all taxonomic levels, so this doesn't make much sense. For a real analysis, you'd probably want to restrict to a single rank (eg species). You can easily do this with filter: spec = filter(t-> taxrank(t) == :species, mps3). We're not doing this for the demo dataset, because there's not any taxonomic overlap at the species level.","category":"page"}]
}
